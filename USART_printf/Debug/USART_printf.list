
USART_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002230  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800233c  0800233c  0001233c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023dc  080023dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080023dc  080023dc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023dc  080023dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023dc  080023dc  000123dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023e0  080023e0  000123e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080023e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  08002454  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002454  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000056f6  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001431  00000000  00000000  0002578f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  00026bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  00027288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017711  00000000  00000000  000278c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007119  00000000  00000000  0003efd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083565  00000000  00000000  000460f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c9657  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002084  00000000  00000000  000c96a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002324 	.word	0x08002324

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002324 	.word	0x08002324

0800014c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  if (ch == '\n')
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0a      	cmp	r3, #10
 8000158:	d106      	bne.n	8000168 <__io_putchar+0x1c>
    HAL_UART_Transmit (&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800015a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015e:	2201      	movs	r2, #1
 8000160:	4907      	ldr	r1, [pc, #28]	; (8000180 <__io_putchar+0x34>)
 8000162:	4808      	ldr	r0, [pc, #32]	; (8000184 <__io_putchar+0x38>)
 8000164:	f001 fa4b 	bl	80015fe <HAL_UART_Transmit>
  	HAL_UART_Transmit (&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000168:	1d39      	adds	r1, r7, #4
 800016a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4804      	ldr	r0, [pc, #16]	; (8000184 <__io_putchar+0x38>)
 8000172:	f001 fa44 	bl	80015fe <HAL_UART_Transmit>

  return ch;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	0800233c 	.word	0x0800233c
 8000184:	2000008c 	.word	0x2000008c

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018c:	f000 fa6e 	bl	800066c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000190:	f000 f80e 	bl	80001b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000194:	f000 f878 	bl	8000288 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000198:	f000 f84c 	bl	8000234 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("Hello World!\n");
 800019c:	4803      	ldr	r0, [pc, #12]	; (80001ac <main+0x24>)
 800019e:	f001 fc39 	bl	8001a14 <puts>
	  HAL_Delay(1000);
 80001a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a6:	f000 fac3 	bl	8000730 <HAL_Delay>
	  printf("Hello World!\n");
 80001aa:	e7f7      	b.n	800019c <main+0x14>
 80001ac:	08002340 	.word	0x08002340

080001b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b090      	sub	sp, #64	; 0x40
 80001b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b6:	f107 0318 	add.w	r3, r7, #24
 80001ba:	2228      	movs	r2, #40	; 0x28
 80001bc:	2100      	movs	r1, #0
 80001be:	4618      	mov	r0, r3
 80001c0:	f001 fbb2 	bl	8001928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	605a      	str	r2, [r3, #4]
 80001cc:	609a      	str	r2, [r3, #8]
 80001ce:	60da      	str	r2, [r3, #12]
 80001d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d2:	2302      	movs	r3, #2
 80001d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d6:	2301      	movs	r3, #1
 80001d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001da:	2310      	movs	r3, #16
 80001dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001de:	2302      	movs	r3, #2
 80001e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001e2:	2300      	movs	r3, #0
 80001e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001e6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ec:	f107 0318 	add.w	r3, r7, #24
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 fd9d 	bl	8000d30 <HAL_RCC_OscConfig>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001fc:	f000 f8c6 	bl	800038c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000200:	230f      	movs	r3, #15
 8000202:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000204:	2302      	movs	r3, #2
 8000206:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000208:	2300      	movs	r3, #0
 800020a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800020c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000210:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	2102      	movs	r1, #2
 800021a:	4618      	mov	r0, r3
 800021c:	f001 f80a 	bl	8001234 <HAL_RCC_ClockConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000226:	f000 f8b1 	bl	800038c <Error_Handler>
  }
}
 800022a:	bf00      	nop
 800022c:	3740      	adds	r7, #64	; 0x40
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000238:	4b11      	ldr	r3, [pc, #68]	; (8000280 <MX_USART2_UART_Init+0x4c>)
 800023a:	4a12      	ldr	r2, [pc, #72]	; (8000284 <MX_USART2_UART_Init+0x50>)
 800023c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800023e:	4b10      	ldr	r3, [pc, #64]	; (8000280 <MX_USART2_UART_Init+0x4c>)
 8000240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000244:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <MX_USART2_UART_Init+0x4c>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800024c:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <MX_USART2_UART_Init+0x4c>)
 800024e:	2200      	movs	r2, #0
 8000250:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000252:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <MX_USART2_UART_Init+0x4c>)
 8000254:	2200      	movs	r2, #0
 8000256:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000258:	4b09      	ldr	r3, [pc, #36]	; (8000280 <MX_USART2_UART_Init+0x4c>)
 800025a:	220c      	movs	r2, #12
 800025c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800025e:	4b08      	ldr	r3, [pc, #32]	; (8000280 <MX_USART2_UART_Init+0x4c>)
 8000260:	2200      	movs	r2, #0
 8000262:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <MX_USART2_UART_Init+0x4c>)
 8000266:	2200      	movs	r2, #0
 8000268:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800026a:	4805      	ldr	r0, [pc, #20]	; (8000280 <MX_USART2_UART_Init+0x4c>)
 800026c:	f001 f97a 	bl	8001564 <HAL_UART_Init>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000276:	f000 f889 	bl	800038c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	2000008c 	.word	0x2000008c
 8000284:	40004400 	.word	0x40004400

08000288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b088      	sub	sp, #32
 800028c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028e:	f107 0310 	add.w	r3, r7, #16
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800029c:	4b2d      	ldr	r3, [pc, #180]	; (8000354 <MX_GPIO_Init+0xcc>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a2c      	ldr	r2, [pc, #176]	; (8000354 <MX_GPIO_Init+0xcc>)
 80002a2:	f043 0310 	orr.w	r3, r3, #16
 80002a6:	6193      	str	r3, [r2, #24]
 80002a8:	4b2a      	ldr	r3, [pc, #168]	; (8000354 <MX_GPIO_Init+0xcc>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	f003 0310 	and.w	r3, r3, #16
 80002b0:	60fb      	str	r3, [r7, #12]
 80002b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b4:	4b27      	ldr	r3, [pc, #156]	; (8000354 <MX_GPIO_Init+0xcc>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a26      	ldr	r2, [pc, #152]	; (8000354 <MX_GPIO_Init+0xcc>)
 80002ba:	f043 0320 	orr.w	r3, r3, #32
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b24      	ldr	r3, [pc, #144]	; (8000354 <MX_GPIO_Init+0xcc>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f003 0320 	and.w	r3, r3, #32
 80002c8:	60bb      	str	r3, [r7, #8]
 80002ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002cc:	4b21      	ldr	r3, [pc, #132]	; (8000354 <MX_GPIO_Init+0xcc>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a20      	ldr	r2, [pc, #128]	; (8000354 <MX_GPIO_Init+0xcc>)
 80002d2:	f043 0304 	orr.w	r3, r3, #4
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b1e      	ldr	r3, [pc, #120]	; (8000354 <MX_GPIO_Init+0xcc>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0304 	and.w	r3, r3, #4
 80002e0:	607b      	str	r3, [r7, #4]
 80002e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e4:	4b1b      	ldr	r3, [pc, #108]	; (8000354 <MX_GPIO_Init+0xcc>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a1a      	ldr	r2, [pc, #104]	; (8000354 <MX_GPIO_Init+0xcc>)
 80002ea:	f043 0308 	orr.w	r3, r3, #8
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b18      	ldr	r3, [pc, #96]	; (8000354 <MX_GPIO_Init+0xcc>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0308 	and.w	r3, r3, #8
 80002f8:	603b      	str	r3, [r7, #0]
 80002fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2120      	movs	r1, #32
 8000300:	4815      	ldr	r0, [pc, #84]	; (8000358 <MX_GPIO_Init+0xd0>)
 8000302:	f000 fccb 	bl	8000c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000306:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800030a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800030c:	4b13      	ldr	r3, [pc, #76]	; (800035c <MX_GPIO_Init+0xd4>)
 800030e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000310:	2300      	movs	r3, #0
 8000312:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000314:	f107 0310 	add.w	r3, r7, #16
 8000318:	4619      	mov	r1, r3
 800031a:	4811      	ldr	r0, [pc, #68]	; (8000360 <MX_GPIO_Init+0xd8>)
 800031c:	f000 fb3a 	bl	8000994 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000320:	2320      	movs	r3, #32
 8000322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000324:	2301      	movs	r3, #1
 8000326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000328:	2300      	movs	r3, #0
 800032a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032c:	2302      	movs	r3, #2
 800032e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000330:	f107 0310 	add.w	r3, r7, #16
 8000334:	4619      	mov	r1, r3
 8000336:	4808      	ldr	r0, [pc, #32]	; (8000358 <MX_GPIO_Init+0xd0>)
 8000338:	f000 fb2c 	bl	8000994 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800033c:	2200      	movs	r2, #0
 800033e:	2100      	movs	r1, #0
 8000340:	2028      	movs	r0, #40	; 0x28
 8000342:	f000 faf0 	bl	8000926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000346:	2028      	movs	r0, #40	; 0x28
 8000348:	f000 fb09 	bl	800095e <HAL_NVIC_EnableIRQ>

}
 800034c:	bf00      	nop
 800034e:	3720      	adds	r7, #32
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40021000 	.word	0x40021000
 8000358:	40010800 	.word	0x40010800
 800035c:	10110000 	.word	0x10110000
 8000360:	40011000 	.word	0x40011000

08000364 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 800036e:	88fb      	ldrh	r3, [r7, #6]
 8000370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000374:	d104      	bne.n	8000380 <HAL_GPIO_EXTI_Callback+0x1c>
	{
	case B1_Pin:
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000376:	2120      	movs	r1, #32
 8000378:	4803      	ldr	r0, [pc, #12]	; (8000388 <HAL_GPIO_EXTI_Callback+0x24>)
 800037a:	f000 fca7 	bl	8000ccc <HAL_GPIO_TogglePin>
		break;
 800037e:	bf00      	nop

	default:
		;
	}
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010800 	.word	0x40010800

0800038c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000390:	b672      	cpsid	i
}
 8000392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000394:	e7fe      	b.n	8000394 <Error_Handler+0x8>
	...

08000398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000398:	b480      	push	{r7}
 800039a:	b085      	sub	sp, #20
 800039c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800039e:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <HAL_MspInit+0x5c>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	4a14      	ldr	r2, [pc, #80]	; (80003f4 <HAL_MspInit+0x5c>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	6193      	str	r3, [r2, #24]
 80003aa:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <HAL_MspInit+0x5c>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	60bb      	str	r3, [r7, #8]
 80003b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <HAL_MspInit+0x5c>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <HAL_MspInit+0x5c>)
 80003bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c0:	61d3      	str	r3, [r2, #28]
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <HAL_MspInit+0x5c>)
 80003c4:	69db      	ldr	r3, [r3, #28]
 80003c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ce:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <HAL_MspInit+0x60>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <HAL_MspInit+0x60>)
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ea:	bf00      	nop
 80003ec:	3714      	adds	r7, #20
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr
 80003f4:	40021000 	.word	0x40021000
 80003f8:	40010000 	.word	0x40010000

080003fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b088      	sub	sp, #32
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000404:	f107 0310 	add.w	r3, r7, #16
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a15      	ldr	r2, [pc, #84]	; (800046c <HAL_UART_MspInit+0x70>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d123      	bne.n	8000464 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800041c:	4b14      	ldr	r3, [pc, #80]	; (8000470 <HAL_UART_MspInit+0x74>)
 800041e:	69db      	ldr	r3, [r3, #28]
 8000420:	4a13      	ldr	r2, [pc, #76]	; (8000470 <HAL_UART_MspInit+0x74>)
 8000422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000426:	61d3      	str	r3, [r2, #28]
 8000428:	4b11      	ldr	r3, [pc, #68]	; (8000470 <HAL_UART_MspInit+0x74>)
 800042a:	69db      	ldr	r3, [r3, #28]
 800042c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000434:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <HAL_UART_MspInit+0x74>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a0d      	ldr	r2, [pc, #52]	; (8000470 <HAL_UART_MspInit+0x74>)
 800043a:	f043 0304 	orr.w	r3, r3, #4
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <HAL_UART_MspInit+0x74>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0304 	and.w	r3, r3, #4
 8000448:	60bb      	str	r3, [r7, #8]
 800044a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800044c:	230c      	movs	r3, #12
 800044e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000450:	2302      	movs	r3, #2
 8000452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2302      	movs	r3, #2
 8000456:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	4619      	mov	r1, r3
 800045e:	4805      	ldr	r0, [pc, #20]	; (8000474 <HAL_UART_MspInit+0x78>)
 8000460:	f000 fa98 	bl	8000994 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000464:	bf00      	nop
 8000466:	3720      	adds	r7, #32
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40004400 	.word	0x40004400
 8000470:	40021000 	.word	0x40021000
 8000474:	40010800 	.word	0x40010800

08000478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800047c:	e7fe      	b.n	800047c <NMI_Handler+0x4>

0800047e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000482:	e7fe      	b.n	8000482 <HardFault_Handler+0x4>

08000484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000488:	e7fe      	b.n	8000488 <MemManage_Handler+0x4>

0800048a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800048e:	e7fe      	b.n	800048e <BusFault_Handler+0x4>

08000490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000494:	e7fe      	b.n	8000494 <UsageFault_Handler+0x4>

08000496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr

080004a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr

080004ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b2:	bf00      	nop
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr

080004ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004be:	f000 f91b 	bl	80006f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004c6:	b580      	push	{r7, lr}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80004ca:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80004ce:	f000 fc17 	bl	8000d00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b086      	sub	sp, #24
 80004da:	af00      	add	r7, sp, #0
 80004dc:	60f8      	str	r0, [r7, #12]
 80004de:	60b9      	str	r1, [r7, #8]
 80004e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	617b      	str	r3, [r7, #20]
 80004e6:	e00a      	b.n	80004fe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004e8:	f3af 8000 	nop.w
 80004ec:	4601      	mov	r1, r0
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	1c5a      	adds	r2, r3, #1
 80004f2:	60ba      	str	r2, [r7, #8]
 80004f4:	b2ca      	uxtb	r2, r1
 80004f6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	3301      	adds	r3, #1
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	697a      	ldr	r2, [r7, #20]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	429a      	cmp	r2, r3
 8000504:	dbf0      	blt.n	80004e8 <_read+0x12>
	}

return len;
 8000506:	687b      	ldr	r3, [r7, #4]
}
 8000508:	4618      	mov	r0, r3
 800050a:	3718      	adds	r7, #24
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	e009      	b.n	8000536 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	1c5a      	adds	r2, r3, #1
 8000526:	60ba      	str	r2, [r7, #8]
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff fe0e 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	3301      	adds	r3, #1
 8000534:	617b      	str	r3, [r7, #20]
 8000536:	697a      	ldr	r2, [r7, #20]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	429a      	cmp	r2, r3
 800053c:	dbf1      	blt.n	8000522 <_write+0x12>
	}
	return len;
 800053e:	687b      	ldr	r3, [r7, #4]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3718      	adds	r7, #24
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <_close>:

int _close(int file)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	return -1;
 8000550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000554:	4618      	mov	r0, r3
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800056e:	605a      	str	r2, [r3, #4]
	return 0;
 8000570:	2300      	movs	r3, #0
}
 8000572:	4618      	mov	r0, r3
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <_isatty>:

int _isatty(int file)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	return 1;
 8000584:	2301      	movs	r3, #1
}
 8000586:	4618      	mov	r0, r3
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
	return 0;
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005b0:	4a14      	ldr	r2, [pc, #80]	; (8000604 <_sbrk+0x5c>)
 80005b2:	4b15      	ldr	r3, [pc, #84]	; (8000608 <_sbrk+0x60>)
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005bc:	4b13      	ldr	r3, [pc, #76]	; (800060c <_sbrk+0x64>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d102      	bne.n	80005ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <_sbrk+0x64>)
 80005c6:	4a12      	ldr	r2, [pc, #72]	; (8000610 <_sbrk+0x68>)
 80005c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <_sbrk+0x64>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4413      	add	r3, r2
 80005d2:	693a      	ldr	r2, [r7, #16]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d207      	bcs.n	80005e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d8:	f001 f97c 	bl	80018d4 <__errno>
 80005dc:	4603      	mov	r3, r0
 80005de:	220c      	movs	r2, #12
 80005e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005e6:	e009      	b.n	80005fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <_sbrk+0x64>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ee:	4b07      	ldr	r3, [pc, #28]	; (800060c <_sbrk+0x64>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	4a05      	ldr	r2, [pc, #20]	; (800060c <_sbrk+0x64>)
 80005f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005fa:	68fb      	ldr	r3, [r7, #12]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20005000 	.word	0x20005000
 8000608:	00000400 	.word	0x00000400
 800060c:	200000d0 	.word	0x200000d0
 8000610:	200000e8 	.word	0x200000e8

08000614 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000622:	490d      	ldr	r1, [pc, #52]	; (8000658 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000628:	e002      	b.n	8000630 <LoopCopyDataInit>

0800062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062e:	3304      	adds	r3, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000634:	d3f9      	bcc.n	800062a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000638:	4c0a      	ldr	r4, [pc, #40]	; (8000664 <LoopFillZerobss+0x22>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800063c:	e001      	b.n	8000642 <LoopFillZerobss>

0800063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000640:	3204      	adds	r2, #4

08000642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000644:	d3fb      	bcc.n	800063e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000646:	f7ff ffe5 	bl	8000614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800064a:	f001 f949 	bl	80018e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064e:	f7ff fd9b 	bl	8000188 <main>
  bx lr
 8000652:	4770      	bx	lr
  ldr r0, =_sdata
 8000654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000658:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800065c:	080023e4 	.word	0x080023e4
  ldr r2, =_sbss
 8000660:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000664:	200000e8 	.word	0x200000e8

08000668 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000668:	e7fe      	b.n	8000668 <ADC1_2_IRQHandler>
	...

0800066c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <HAL_Init+0x28>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <HAL_Init+0x28>)
 8000676:	f043 0310 	orr.w	r3, r3, #16
 800067a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800067c:	2003      	movs	r0, #3
 800067e:	f000 f947 	bl	8000910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000682:	2000      	movs	r0, #0
 8000684:	f000 f808 	bl	8000698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000688:	f7ff fe86 	bl	8000398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800068c:	2300      	movs	r3, #0
}
 800068e:	4618      	mov	r0, r3
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40022000 	.word	0x40022000

08000698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_InitTick+0x54>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <HAL_InitTick+0x58>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4619      	mov	r1, r3
 80006aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80006b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f95f 	bl	800097a <HAL_SYSTICK_Config>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e00e      	b.n	80006e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2b0f      	cmp	r3, #15
 80006ca:	d80a      	bhi.n	80006e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006cc:	2200      	movs	r2, #0
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006d4:	f000 f927 	bl	8000926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d8:	4a06      	ldr	r2, [pc, #24]	; (80006f4 <HAL_InitTick+0x5c>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006de:	2300      	movs	r3, #0
 80006e0:	e000      	b.n	80006e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000000 	.word	0x20000000
 80006f0:	20000008 	.word	0x20000008
 80006f4:	20000004 	.word	0x20000004

080006f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <HAL_IncTick+0x1c>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <HAL_IncTick+0x20>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4413      	add	r3, r2
 8000708:	4a03      	ldr	r2, [pc, #12]	; (8000718 <HAL_IncTick+0x20>)
 800070a:	6013      	str	r3, [r2, #0]
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	20000008 	.word	0x20000008
 8000718:	200000d4 	.word	0x200000d4

0800071c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  return uwTick;
 8000720:	4b02      	ldr	r3, [pc, #8]	; (800072c <HAL_GetTick+0x10>)
 8000722:	681b      	ldr	r3, [r3, #0]
}
 8000724:	4618      	mov	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	200000d4 	.word	0x200000d4

08000730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000738:	f7ff fff0 	bl	800071c <HAL_GetTick>
 800073c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000748:	d005      	beq.n	8000756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <HAL_Delay+0x44>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	461a      	mov	r2, r3
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	4413      	add	r3, r2
 8000754:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000756:	bf00      	nop
 8000758:	f7ff ffe0 	bl	800071c <HAL_GetTick>
 800075c:	4602      	mov	r2, r0
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d8f7      	bhi.n	8000758 <HAL_Delay+0x28>
  {
  }
}
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000008 	.word	0x20000008

08000778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f003 0307 	and.w	r3, r3, #7
 8000786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <__NVIC_SetPriorityGrouping+0x44>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000794:	4013      	ands	r3, r2
 8000796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007aa:	4a04      	ldr	r2, [pc, #16]	; (80007bc <__NVIC_SetPriorityGrouping+0x44>)
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	60d3      	str	r3, [r2, #12]
}
 80007b0:	bf00      	nop
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <__NVIC_GetPriorityGrouping+0x18>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	0a1b      	lsrs	r3, r3, #8
 80007ca:	f003 0307 	and.w	r3, r3, #7
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	db0b      	blt.n	8000806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	f003 021f 	and.w	r2, r3, #31
 80007f4:	4906      	ldr	r1, [pc, #24]	; (8000810 <__NVIC_EnableIRQ+0x34>)
 80007f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fa:	095b      	lsrs	r3, r3, #5
 80007fc:	2001      	movs	r0, #1
 80007fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	e000e100 	.word	0xe000e100

08000814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	6039      	str	r1, [r7, #0]
 800081e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000824:	2b00      	cmp	r3, #0
 8000826:	db0a      	blt.n	800083e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	b2da      	uxtb	r2, r3
 800082c:	490c      	ldr	r1, [pc, #48]	; (8000860 <__NVIC_SetPriority+0x4c>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	0112      	lsls	r2, r2, #4
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	440b      	add	r3, r1
 8000838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800083c:	e00a      	b.n	8000854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4908      	ldr	r1, [pc, #32]	; (8000864 <__NVIC_SetPriority+0x50>)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	f003 030f 	and.w	r3, r3, #15
 800084a:	3b04      	subs	r3, #4
 800084c:	0112      	lsls	r2, r2, #4
 800084e:	b2d2      	uxtb	r2, r2
 8000850:	440b      	add	r3, r1
 8000852:	761a      	strb	r2, [r3, #24]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000e100 	.word	0xe000e100
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000868:	b480      	push	{r7}
 800086a:	b089      	sub	sp, #36	; 0x24
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	f1c3 0307 	rsb	r3, r3, #7
 8000882:	2b04      	cmp	r3, #4
 8000884:	bf28      	it	cs
 8000886:	2304      	movcs	r3, #4
 8000888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	3304      	adds	r3, #4
 800088e:	2b06      	cmp	r3, #6
 8000890:	d902      	bls.n	8000898 <NVIC_EncodePriority+0x30>
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3b03      	subs	r3, #3
 8000896:	e000      	b.n	800089a <NVIC_EncodePriority+0x32>
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	43da      	mvns	r2, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	401a      	ands	r2, r3
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ba:	43d9      	mvns	r1, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	4313      	orrs	r3, r2
         );
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3724      	adds	r7, #36	; 0x24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr

080008cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008dc:	d301      	bcc.n	80008e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008de:	2301      	movs	r3, #1
 80008e0:	e00f      	b.n	8000902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <SysTick_Config+0x40>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ea:	210f      	movs	r1, #15
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008f0:	f7ff ff90 	bl	8000814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <SysTick_Config+0x40>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fa:	4b04      	ldr	r3, [pc, #16]	; (800090c <SysTick_Config+0x40>)
 80008fc:	2207      	movs	r2, #7
 80008fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	e000e010 	.word	0xe000e010

08000910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff ff2d 	bl	8000778 <__NVIC_SetPriorityGrouping>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000926:	b580      	push	{r7, lr}
 8000928:	b086      	sub	sp, #24
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	607a      	str	r2, [r7, #4]
 8000932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000938:	f7ff ff42 	bl	80007c0 <__NVIC_GetPriorityGrouping>
 800093c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	68b9      	ldr	r1, [r7, #8]
 8000942:	6978      	ldr	r0, [r7, #20]
 8000944:	f7ff ff90 	bl	8000868 <NVIC_EncodePriority>
 8000948:	4602      	mov	r2, r0
 800094a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800094e:	4611      	mov	r1, r2
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff5f 	bl	8000814 <__NVIC_SetPriority>
}
 8000956:	bf00      	nop
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	4603      	mov	r3, r0
 8000966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff35 	bl	80007dc <__NVIC_EnableIRQ>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ffa2 	bl	80008cc <SysTick_Config>
 8000988:	4603      	mov	r3, r0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000994:	b480      	push	{r7}
 8000996:	b08b      	sub	sp, #44	; 0x2c
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009a6:	e169      	b.n	8000c7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009a8:	2201      	movs	r2, #1
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	69fa      	ldr	r2, [r7, #28]
 80009b8:	4013      	ands	r3, r2
 80009ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	f040 8158 	bne.w	8000c76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	4a9a      	ldr	r2, [pc, #616]	; (8000c34 <HAL_GPIO_Init+0x2a0>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d05e      	beq.n	8000a8e <HAL_GPIO_Init+0xfa>
 80009d0:	4a98      	ldr	r2, [pc, #608]	; (8000c34 <HAL_GPIO_Init+0x2a0>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d875      	bhi.n	8000ac2 <HAL_GPIO_Init+0x12e>
 80009d6:	4a98      	ldr	r2, [pc, #608]	; (8000c38 <HAL_GPIO_Init+0x2a4>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d058      	beq.n	8000a8e <HAL_GPIO_Init+0xfa>
 80009dc:	4a96      	ldr	r2, [pc, #600]	; (8000c38 <HAL_GPIO_Init+0x2a4>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d86f      	bhi.n	8000ac2 <HAL_GPIO_Init+0x12e>
 80009e2:	4a96      	ldr	r2, [pc, #600]	; (8000c3c <HAL_GPIO_Init+0x2a8>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d052      	beq.n	8000a8e <HAL_GPIO_Init+0xfa>
 80009e8:	4a94      	ldr	r2, [pc, #592]	; (8000c3c <HAL_GPIO_Init+0x2a8>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d869      	bhi.n	8000ac2 <HAL_GPIO_Init+0x12e>
 80009ee:	4a94      	ldr	r2, [pc, #592]	; (8000c40 <HAL_GPIO_Init+0x2ac>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d04c      	beq.n	8000a8e <HAL_GPIO_Init+0xfa>
 80009f4:	4a92      	ldr	r2, [pc, #584]	; (8000c40 <HAL_GPIO_Init+0x2ac>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d863      	bhi.n	8000ac2 <HAL_GPIO_Init+0x12e>
 80009fa:	4a92      	ldr	r2, [pc, #584]	; (8000c44 <HAL_GPIO_Init+0x2b0>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d046      	beq.n	8000a8e <HAL_GPIO_Init+0xfa>
 8000a00:	4a90      	ldr	r2, [pc, #576]	; (8000c44 <HAL_GPIO_Init+0x2b0>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d85d      	bhi.n	8000ac2 <HAL_GPIO_Init+0x12e>
 8000a06:	2b12      	cmp	r3, #18
 8000a08:	d82a      	bhi.n	8000a60 <HAL_GPIO_Init+0xcc>
 8000a0a:	2b12      	cmp	r3, #18
 8000a0c:	d859      	bhi.n	8000ac2 <HAL_GPIO_Init+0x12e>
 8000a0e:	a201      	add	r2, pc, #4	; (adr r2, 8000a14 <HAL_GPIO_Init+0x80>)
 8000a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a14:	08000a8f 	.word	0x08000a8f
 8000a18:	08000a69 	.word	0x08000a69
 8000a1c:	08000a7b 	.word	0x08000a7b
 8000a20:	08000abd 	.word	0x08000abd
 8000a24:	08000ac3 	.word	0x08000ac3
 8000a28:	08000ac3 	.word	0x08000ac3
 8000a2c:	08000ac3 	.word	0x08000ac3
 8000a30:	08000ac3 	.word	0x08000ac3
 8000a34:	08000ac3 	.word	0x08000ac3
 8000a38:	08000ac3 	.word	0x08000ac3
 8000a3c:	08000ac3 	.word	0x08000ac3
 8000a40:	08000ac3 	.word	0x08000ac3
 8000a44:	08000ac3 	.word	0x08000ac3
 8000a48:	08000ac3 	.word	0x08000ac3
 8000a4c:	08000ac3 	.word	0x08000ac3
 8000a50:	08000ac3 	.word	0x08000ac3
 8000a54:	08000ac3 	.word	0x08000ac3
 8000a58:	08000a71 	.word	0x08000a71
 8000a5c:	08000a85 	.word	0x08000a85
 8000a60:	4a79      	ldr	r2, [pc, #484]	; (8000c48 <HAL_GPIO_Init+0x2b4>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d013      	beq.n	8000a8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a66:	e02c      	b.n	8000ac2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	623b      	str	r3, [r7, #32]
          break;
 8000a6e:	e029      	b.n	8000ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	3304      	adds	r3, #4
 8000a76:	623b      	str	r3, [r7, #32]
          break;
 8000a78:	e024      	b.n	8000ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	3308      	adds	r3, #8
 8000a80:	623b      	str	r3, [r7, #32]
          break;
 8000a82:	e01f      	b.n	8000ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	330c      	adds	r3, #12
 8000a8a:	623b      	str	r3, [r7, #32]
          break;
 8000a8c:	e01a      	b.n	8000ac4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d102      	bne.n	8000a9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a96:	2304      	movs	r3, #4
 8000a98:	623b      	str	r3, [r7, #32]
          break;
 8000a9a:	e013      	b.n	8000ac4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d105      	bne.n	8000ab0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aa4:	2308      	movs	r3, #8
 8000aa6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	69fa      	ldr	r2, [r7, #28]
 8000aac:	611a      	str	r2, [r3, #16]
          break;
 8000aae:	e009      	b.n	8000ac4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	69fa      	ldr	r2, [r7, #28]
 8000ab8:	615a      	str	r2, [r3, #20]
          break;
 8000aba:	e003      	b.n	8000ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
          break;
 8000ac0:	e000      	b.n	8000ac4 <HAL_GPIO_Init+0x130>
          break;
 8000ac2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	2bff      	cmp	r3, #255	; 0xff
 8000ac8:	d801      	bhi.n	8000ace <HAL_GPIO_Init+0x13a>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	e001      	b.n	8000ad2 <HAL_GPIO_Init+0x13e>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	2bff      	cmp	r3, #255	; 0xff
 8000ad8:	d802      	bhi.n	8000ae0 <HAL_GPIO_Init+0x14c>
 8000ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	e002      	b.n	8000ae6 <HAL_GPIO_Init+0x152>
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae2:	3b08      	subs	r3, #8
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	210f      	movs	r1, #15
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	fa01 f303 	lsl.w	r3, r1, r3
 8000af4:	43db      	mvns	r3, r3
 8000af6:	401a      	ands	r2, r3
 8000af8:	6a39      	ldr	r1, [r7, #32]
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	fa01 f303 	lsl.w	r3, r1, r3
 8000b00:	431a      	orrs	r2, r3
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f000 80b1 	beq.w	8000c76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b14:	4b4d      	ldr	r3, [pc, #308]	; (8000c4c <HAL_GPIO_Init+0x2b8>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a4c      	ldr	r2, [pc, #304]	; (8000c4c <HAL_GPIO_Init+0x2b8>)
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b4a      	ldr	r3, [pc, #296]	; (8000c4c <HAL_GPIO_Init+0x2b8>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b2c:	4a48      	ldr	r2, [pc, #288]	; (8000c50 <HAL_GPIO_Init+0x2bc>)
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	089b      	lsrs	r3, r3, #2
 8000b32:	3302      	adds	r3, #2
 8000b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	f003 0303 	and.w	r3, r3, #3
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	220f      	movs	r2, #15
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a40      	ldr	r2, [pc, #256]	; (8000c54 <HAL_GPIO_Init+0x2c0>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d013      	beq.n	8000b80 <HAL_GPIO_Init+0x1ec>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a3f      	ldr	r2, [pc, #252]	; (8000c58 <HAL_GPIO_Init+0x2c4>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d00d      	beq.n	8000b7c <HAL_GPIO_Init+0x1e8>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a3e      	ldr	r2, [pc, #248]	; (8000c5c <HAL_GPIO_Init+0x2c8>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d007      	beq.n	8000b78 <HAL_GPIO_Init+0x1e4>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a3d      	ldr	r2, [pc, #244]	; (8000c60 <HAL_GPIO_Init+0x2cc>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d101      	bne.n	8000b74 <HAL_GPIO_Init+0x1e0>
 8000b70:	2303      	movs	r3, #3
 8000b72:	e006      	b.n	8000b82 <HAL_GPIO_Init+0x1ee>
 8000b74:	2304      	movs	r3, #4
 8000b76:	e004      	b.n	8000b82 <HAL_GPIO_Init+0x1ee>
 8000b78:	2302      	movs	r3, #2
 8000b7a:	e002      	b.n	8000b82 <HAL_GPIO_Init+0x1ee>
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e000      	b.n	8000b82 <HAL_GPIO_Init+0x1ee>
 8000b80:	2300      	movs	r3, #0
 8000b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b84:	f002 0203 	and.w	r2, r2, #3
 8000b88:	0092      	lsls	r2, r2, #2
 8000b8a:	4093      	lsls	r3, r2
 8000b8c:	68fa      	ldr	r2, [r7, #12]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b92:	492f      	ldr	r1, [pc, #188]	; (8000c50 <HAL_GPIO_Init+0x2bc>)
 8000b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b96:	089b      	lsrs	r3, r3, #2
 8000b98:	3302      	adds	r3, #2
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d006      	beq.n	8000bba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bac:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	492c      	ldr	r1, [pc, #176]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	600b      	str	r3, [r1, #0]
 8000bb8:	e006      	b.n	8000bc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bba:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	4928      	ldr	r1, [pc, #160]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d006      	beq.n	8000be2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bd4:	4b23      	ldr	r3, [pc, #140]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000bd6:	685a      	ldr	r2, [r3, #4]
 8000bd8:	4922      	ldr	r1, [pc, #136]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	604b      	str	r3, [r1, #4]
 8000be0:	e006      	b.n	8000bf0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000be2:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000be4:	685a      	ldr	r2, [r3, #4]
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	43db      	mvns	r3, r3
 8000bea:	491e      	ldr	r1, [pc, #120]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000bec:	4013      	ands	r3, r2
 8000bee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d006      	beq.n	8000c0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000bfe:	689a      	ldr	r2, [r3, #8]
 8000c00:	4918      	ldr	r1, [pc, #96]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	608b      	str	r3, [r1, #8]
 8000c08:	e006      	b.n	8000c18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000c0c:	689a      	ldr	r2, [r3, #8]
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	43db      	mvns	r3, r3
 8000c12:	4914      	ldr	r1, [pc, #80]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000c14:	4013      	ands	r3, r2
 8000c16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d021      	beq.n	8000c68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000c26:	68da      	ldr	r2, [r3, #12]
 8000c28:	490e      	ldr	r1, [pc, #56]	; (8000c64 <HAL_GPIO_Init+0x2d0>)
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	60cb      	str	r3, [r1, #12]
 8000c30:	e021      	b.n	8000c76 <HAL_GPIO_Init+0x2e2>
 8000c32:	bf00      	nop
 8000c34:	10320000 	.word	0x10320000
 8000c38:	10310000 	.word	0x10310000
 8000c3c:	10220000 	.word	0x10220000
 8000c40:	10210000 	.word	0x10210000
 8000c44:	10120000 	.word	0x10120000
 8000c48:	10110000 	.word	0x10110000
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40010000 	.word	0x40010000
 8000c54:	40010800 	.word	0x40010800
 8000c58:	40010c00 	.word	0x40010c00
 8000c5c:	40011000 	.word	0x40011000
 8000c60:	40011400 	.word	0x40011400
 8000c64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_GPIO_Init+0x304>)
 8000c6a:	68da      	ldr	r2, [r3, #12]
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	4909      	ldr	r1, [pc, #36]	; (8000c98 <HAL_GPIO_Init+0x304>)
 8000c72:	4013      	ands	r3, r2
 8000c74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	3301      	adds	r3, #1
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c82:	fa22 f303 	lsr.w	r3, r2, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f47f ae8e 	bne.w	80009a8 <HAL_GPIO_Init+0x14>
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	bf00      	nop
 8000c90:	372c      	adds	r7, #44	; 0x2c
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	40010400 	.word	0x40010400

08000c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	807b      	strh	r3, [r7, #2]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cac:	787b      	ldrb	r3, [r7, #1]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cb2:	887a      	ldrh	r2, [r7, #2]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cb8:	e003      	b.n	8000cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cba:	887b      	ldrh	r3, [r7, #2]
 8000cbc:	041a      	lsls	r2, r3, #16
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	611a      	str	r2, [r3, #16]
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cde:	887a      	ldrh	r2, [r7, #2]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	041a      	lsls	r2, r3, #16
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	43d9      	mvns	r1, r3
 8000cea:	887b      	ldrh	r3, [r7, #2]
 8000cec:	400b      	ands	r3, r1
 8000cee:	431a      	orrs	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	611a      	str	r2, [r3, #16]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
	...

08000d00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d0c:	695a      	ldr	r2, [r3, #20]
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	4013      	ands	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d006      	beq.n	8000d24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d18:	88fb      	ldrh	r3, [r7, #6]
 8000d1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d1c:	88fb      	ldrh	r3, [r7, #6]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fb20 	bl	8000364 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40010400 	.word	0x40010400

08000d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e272      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f000 8087 	beq.w	8000e5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d50:	4b92      	ldr	r3, [pc, #584]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 030c 	and.w	r3, r3, #12
 8000d58:	2b04      	cmp	r3, #4
 8000d5a:	d00c      	beq.n	8000d76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d5c:	4b8f      	ldr	r3, [pc, #572]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 030c 	and.w	r3, r3, #12
 8000d64:	2b08      	cmp	r3, #8
 8000d66:	d112      	bne.n	8000d8e <HAL_RCC_OscConfig+0x5e>
 8000d68:	4b8c      	ldr	r3, [pc, #560]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d74:	d10b      	bne.n	8000d8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d76:	4b89      	ldr	r3, [pc, #548]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d06c      	beq.n	8000e5c <HAL_RCC_OscConfig+0x12c>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d168      	bne.n	8000e5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e24c      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d96:	d106      	bne.n	8000da6 <HAL_RCC_OscConfig+0x76>
 8000d98:	4b80      	ldr	r3, [pc, #512]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a7f      	ldr	r2, [pc, #508]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	e02e      	b.n	8000e04 <HAL_RCC_OscConfig+0xd4>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10c      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x98>
 8000dae:	4b7b      	ldr	r3, [pc, #492]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a7a      	ldr	r2, [pc, #488]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	4b78      	ldr	r3, [pc, #480]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a77      	ldr	r2, [pc, #476]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	e01d      	b.n	8000e04 <HAL_RCC_OscConfig+0xd4>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dd0:	d10c      	bne.n	8000dec <HAL_RCC_OscConfig+0xbc>
 8000dd2:	4b72      	ldr	r3, [pc, #456]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a71      	ldr	r2, [pc, #452]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	4b6f      	ldr	r3, [pc, #444]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a6e      	ldr	r2, [pc, #440]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e00b      	b.n	8000e04 <HAL_RCC_OscConfig+0xd4>
 8000dec:	4b6b      	ldr	r3, [pc, #428]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a6a      	ldr	r2, [pc, #424]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	4b68      	ldr	r3, [pc, #416]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a67      	ldr	r2, [pc, #412]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d013      	beq.n	8000e34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0c:	f7ff fc86 	bl	800071c <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e14:	f7ff fc82 	bl	800071c <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b64      	cmp	r3, #100	; 0x64
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e200      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e26:	4b5d      	ldr	r3, [pc, #372]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d0f0      	beq.n	8000e14 <HAL_RCC_OscConfig+0xe4>
 8000e32:	e014      	b.n	8000e5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e34:	f7ff fc72 	bl	800071c <HAL_GetTick>
 8000e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e3a:	e008      	b.n	8000e4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e3c:	f7ff fc6e 	bl	800071c <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b64      	cmp	r3, #100	; 0x64
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e1ec      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e4e:	4b53      	ldr	r3, [pc, #332]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f0      	bne.n	8000e3c <HAL_RCC_OscConfig+0x10c>
 8000e5a:	e000      	b.n	8000e5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d063      	beq.n	8000f32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e6a:	4b4c      	ldr	r3, [pc, #304]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 030c 	and.w	r3, r3, #12
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00b      	beq.n	8000e8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e76:	4b49      	ldr	r3, [pc, #292]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 030c 	and.w	r3, r3, #12
 8000e7e:	2b08      	cmp	r3, #8
 8000e80:	d11c      	bne.n	8000ebc <HAL_RCC_OscConfig+0x18c>
 8000e82:	4b46      	ldr	r3, [pc, #280]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d116      	bne.n	8000ebc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e8e:	4b43      	ldr	r3, [pc, #268]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d005      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x176>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d001      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e1c0      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea6:	4b3d      	ldr	r3, [pc, #244]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	4939      	ldr	r1, [pc, #228]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eba:	e03a      	b.n	8000f32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d020      	beq.n	8000f06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ec4:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <HAL_RCC_OscConfig+0x270>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eca:	f7ff fc27 	bl	800071c <HAL_GetTick>
 8000ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed0:	e008      	b.n	8000ee4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ed2:	f7ff fc23 	bl	800071c <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d901      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e1a1      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee4:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d0f0      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef0:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	4927      	ldr	r1, [pc, #156]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000f00:	4313      	orrs	r3, r2
 8000f02:	600b      	str	r3, [r1, #0]
 8000f04:	e015      	b.n	8000f32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <HAL_RCC_OscConfig+0x270>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0c:	f7ff fc06 	bl	800071c <HAL_GetTick>
 8000f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f12:	e008      	b.n	8000f26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f14:	f7ff fc02 	bl	800071c <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e180      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f26:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1f0      	bne.n	8000f14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0308 	and.w	r3, r3, #8
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d03a      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d019      	beq.n	8000f7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <HAL_RCC_OscConfig+0x274>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f4c:	f7ff fbe6 	bl	800071c <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f54:	f7ff fbe2 	bl	800071c <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e160      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_RCC_OscConfig+0x26c>)
 8000f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f0      	beq.n	8000f54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f000 fad8 	bl	8001528 <RCC_Delay>
 8000f78:	e01c      	b.n	8000fb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_RCC_OscConfig+0x274>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f80:	f7ff fbcc 	bl	800071c <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f86:	e00f      	b.n	8000fa8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f88:	f7ff fbc8 	bl	800071c <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d908      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e146      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	42420000 	.word	0x42420000
 8000fa4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa8:	4b92      	ldr	r3, [pc, #584]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1e9      	bne.n	8000f88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80a6 	beq.w	800110e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fc6:	4b8b      	ldr	r3, [pc, #556]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10d      	bne.n	8000fee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	4b88      	ldr	r3, [pc, #544]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	4a87      	ldr	r2, [pc, #540]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	61d3      	str	r3, [r2, #28]
 8000fde:	4b85      	ldr	r3, [pc, #532]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fea:	2301      	movs	r3, #1
 8000fec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fee:	4b82      	ldr	r3, [pc, #520]	; (80011f8 <HAL_RCC_OscConfig+0x4c8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d118      	bne.n	800102c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ffa:	4b7f      	ldr	r3, [pc, #508]	; (80011f8 <HAL_RCC_OscConfig+0x4c8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a7e      	ldr	r2, [pc, #504]	; (80011f8 <HAL_RCC_OscConfig+0x4c8>)
 8001000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001006:	f7ff fb89 	bl	800071c <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800100e:	f7ff fb85 	bl	800071c <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b64      	cmp	r3, #100	; 0x64
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e103      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001020:	4b75      	ldr	r3, [pc, #468]	; (80011f8 <HAL_RCC_OscConfig+0x4c8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0f0      	beq.n	800100e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d106      	bne.n	8001042 <HAL_RCC_OscConfig+0x312>
 8001034:	4b6f      	ldr	r3, [pc, #444]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	4a6e      	ldr	r2, [pc, #440]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6213      	str	r3, [r2, #32]
 8001040:	e02d      	b.n	800109e <HAL_RCC_OscConfig+0x36e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10c      	bne.n	8001064 <HAL_RCC_OscConfig+0x334>
 800104a:	4b6a      	ldr	r3, [pc, #424]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	4a69      	ldr	r2, [pc, #420]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001050:	f023 0301 	bic.w	r3, r3, #1
 8001054:	6213      	str	r3, [r2, #32]
 8001056:	4b67      	ldr	r3, [pc, #412]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001058:	6a1b      	ldr	r3, [r3, #32]
 800105a:	4a66      	ldr	r2, [pc, #408]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 800105c:	f023 0304 	bic.w	r3, r3, #4
 8001060:	6213      	str	r3, [r2, #32]
 8001062:	e01c      	b.n	800109e <HAL_RCC_OscConfig+0x36e>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	2b05      	cmp	r3, #5
 800106a:	d10c      	bne.n	8001086 <HAL_RCC_OscConfig+0x356>
 800106c:	4b61      	ldr	r3, [pc, #388]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	4a60      	ldr	r2, [pc, #384]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001072:	f043 0304 	orr.w	r3, r3, #4
 8001076:	6213      	str	r3, [r2, #32]
 8001078:	4b5e      	ldr	r3, [pc, #376]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	4a5d      	ldr	r2, [pc, #372]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6213      	str	r3, [r2, #32]
 8001084:	e00b      	b.n	800109e <HAL_RCC_OscConfig+0x36e>
 8001086:	4b5b      	ldr	r3, [pc, #364]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	4a5a      	ldr	r2, [pc, #360]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 800108c:	f023 0301 	bic.w	r3, r3, #1
 8001090:	6213      	str	r3, [r2, #32]
 8001092:	4b58      	ldr	r3, [pc, #352]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001094:	6a1b      	ldr	r3, [r3, #32]
 8001096:	4a57      	ldr	r2, [pc, #348]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001098:	f023 0304 	bic.w	r3, r3, #4
 800109c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d015      	beq.n	80010d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a6:	f7ff fb39 	bl	800071c <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ac:	e00a      	b.n	80010c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ae:	f7ff fb35 	bl	800071c <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010bc:	4293      	cmp	r3, r2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e0b1      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c4:	4b4b      	ldr	r3, [pc, #300]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0ee      	beq.n	80010ae <HAL_RCC_OscConfig+0x37e>
 80010d0:	e014      	b.n	80010fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d2:	f7ff fb23 	bl	800071c <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d8:	e00a      	b.n	80010f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010da:	f7ff fb1f 	bl	800071c <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e09b      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f0:	4b40      	ldr	r3, [pc, #256]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1ee      	bne.n	80010da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010fc:	7dfb      	ldrb	r3, [r7, #23]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d105      	bne.n	800110e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001102:	4b3c      	ldr	r3, [pc, #240]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	4a3b      	ldr	r2, [pc, #236]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800110c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 8087 	beq.w	8001226 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001118:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 030c 	and.w	r3, r3, #12
 8001120:	2b08      	cmp	r3, #8
 8001122:	d061      	beq.n	80011e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	2b02      	cmp	r3, #2
 800112a:	d146      	bne.n	80011ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800112c:	4b33      	ldr	r3, [pc, #204]	; (80011fc <HAL_RCC_OscConfig+0x4cc>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001132:	f7ff faf3 	bl	800071c <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800113a:	f7ff faef 	bl	800071c <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e06d      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114c:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1f0      	bne.n	800113a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001160:	d108      	bne.n	8001174 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001162:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	4921      	ldr	r1, [pc, #132]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001170:	4313      	orrs	r3, r2
 8001172:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a19      	ldr	r1, [r3, #32]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001184:	430b      	orrs	r3, r1
 8001186:	491b      	ldr	r1, [pc, #108]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 8001188:	4313      	orrs	r3, r2
 800118a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <HAL_RCC_OscConfig+0x4cc>)
 800118e:	2201      	movs	r2, #1
 8001190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001192:	f7ff fac3 	bl	800071c <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800119a:	f7ff fabf 	bl	800071c <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e03d      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f0      	beq.n	800119a <HAL_RCC_OscConfig+0x46a>
 80011b8:	e035      	b.n	8001226 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <HAL_RCC_OscConfig+0x4cc>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c0:	f7ff faac 	bl	800071c <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c8:	f7ff faa8 	bl	800071c <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e026      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_RCC_OscConfig+0x4c4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f0      	bne.n	80011c8 <HAL_RCC_OscConfig+0x498>
 80011e6:	e01e      	b.n	8001226 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69db      	ldr	r3, [r3, #28]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d107      	bne.n	8001200 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e019      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40007000 	.word	0x40007000
 80011fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_RCC_OscConfig+0x500>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	429a      	cmp	r2, r3
 8001212:	d106      	bne.n	8001222 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800121e:	429a      	cmp	r2, r3
 8001220:	d001      	beq.n	8001226 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40021000 	.word	0x40021000

08001234 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d101      	bne.n	8001248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e0d0      	b.n	80013ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001248:	4b6a      	ldr	r3, [pc, #424]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d910      	bls.n	8001278 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001256:	4b67      	ldr	r3, [pc, #412]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f023 0207 	bic.w	r2, r3, #7
 800125e:	4965      	ldr	r1, [pc, #404]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	4313      	orrs	r3, r2
 8001264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001266:	4b63      	ldr	r3, [pc, #396]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	d001      	beq.n	8001278 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e0b8      	b.n	80013ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d020      	beq.n	80012c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b00      	cmp	r3, #0
 800128e:	d005      	beq.n	800129c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001290:	4b59      	ldr	r3, [pc, #356]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	4a58      	ldr	r2, [pc, #352]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001296:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800129a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012a8:	4b53      	ldr	r3, [pc, #332]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	4a52      	ldr	r2, [pc, #328]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012b4:	4b50      	ldr	r3, [pc, #320]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	494d      	ldr	r1, [pc, #308]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d040      	beq.n	8001354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d107      	bne.n	80012ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	4b47      	ldr	r3, [pc, #284]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d115      	bne.n	8001312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e07f      	b.n	80013ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d107      	bne.n	8001302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f2:	4b41      	ldr	r3, [pc, #260]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d109      	bne.n	8001312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e073      	b.n	80013ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001302:	4b3d      	ldr	r3, [pc, #244]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e06b      	b.n	80013ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001312:	4b39      	ldr	r3, [pc, #228]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f023 0203 	bic.w	r2, r3, #3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	4936      	ldr	r1, [pc, #216]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001320:	4313      	orrs	r3, r2
 8001322:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001324:	f7ff f9fa 	bl	800071c <HAL_GetTick>
 8001328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800132a:	e00a      	b.n	8001342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800132c:	f7ff f9f6 	bl	800071c <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	f241 3288 	movw	r2, #5000	; 0x1388
 800133a:	4293      	cmp	r3, r2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e053      	b.n	80013ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001342:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 020c 	and.w	r2, r3, #12
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	429a      	cmp	r2, r3
 8001352:	d1eb      	bne.n	800132c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	429a      	cmp	r2, r3
 8001360:	d210      	bcs.n	8001384 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001362:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f023 0207 	bic.w	r2, r3, #7
 800136a:	4922      	ldr	r1, [pc, #136]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d001      	beq.n	8001384 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e032      	b.n	80013ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	2b00      	cmp	r3, #0
 800138e:	d008      	beq.n	80013a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001390:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	4916      	ldr	r1, [pc, #88]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d009      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	490e      	ldr	r1, [pc, #56]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013c2:	f000 f821 	bl	8001408 <HAL_RCC_GetSysClockFreq>
 80013c6:	4602      	mov	r2, r0
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	490a      	ldr	r1, [pc, #40]	; (80013fc <HAL_RCC_ClockConfig+0x1c8>)
 80013d4:	5ccb      	ldrb	r3, [r1, r3]
 80013d6:	fa22 f303 	lsr.w	r3, r2, r3
 80013da:	4a09      	ldr	r2, [pc, #36]	; (8001400 <HAL_RCC_ClockConfig+0x1cc>)
 80013dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_RCC_ClockConfig+0x1d0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f958 	bl	8000698 <HAL_InitTick>

  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40022000 	.word	0x40022000
 80013f8:	40021000 	.word	0x40021000
 80013fc:	08002360 	.word	0x08002360
 8001400:	20000000 	.word	0x20000000
 8001404:	20000004 	.word	0x20000004

08001408 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001408:	b490      	push	{r4, r7}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800140e:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001410:	1d3c      	adds	r4, r7, #4
 8001412:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001414:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001418:	f240 2301 	movw	r3, #513	; 0x201
 800141c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001432:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b04      	cmp	r3, #4
 8001440:	d002      	beq.n	8001448 <HAL_RCC_GetSysClockFreq+0x40>
 8001442:	2b08      	cmp	r3, #8
 8001444:	d003      	beq.n	800144e <HAL_RCC_GetSysClockFreq+0x46>
 8001446:	e02b      	b.n	80014a0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001448:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800144a:	623b      	str	r3, [r7, #32]
      break;
 800144c:	e02b      	b.n	80014a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	0c9b      	lsrs	r3, r3, #18
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	3328      	adds	r3, #40	; 0x28
 8001458:	443b      	add	r3, r7
 800145a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800145e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d012      	beq.n	8001490 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	0c5b      	lsrs	r3, r3, #17
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	3328      	adds	r3, #40	; 0x28
 8001476:	443b      	add	r3, r7
 8001478:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800147c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001482:	fb03 f202 	mul.w	r2, r3, r2
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	fbb2 f3f3 	udiv	r3, r2, r3
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
 800148e:	e004      	b.n	800149a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001494:	fb02 f303 	mul.w	r3, r2, r3
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	623b      	str	r3, [r7, #32]
      break;
 800149e:	e002      	b.n	80014a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_RCC_GetSysClockFreq+0xb4>)
 80014a2:	623b      	str	r3, [r7, #32]
      break;
 80014a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014a6:	6a3b      	ldr	r3, [r7, #32]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3728      	adds	r7, #40	; 0x28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc90      	pop	{r4, r7}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	08002350 	.word	0x08002350
 80014b8:	40021000 	.word	0x40021000
 80014bc:	007a1200 	.word	0x007a1200
 80014c0:	003d0900 	.word	0x003d0900

080014c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014c8:	4b02      	ldr	r3, [pc, #8]	; (80014d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	20000000 	.word	0x20000000

080014d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014dc:	f7ff fff2 	bl	80014c4 <HAL_RCC_GetHCLKFreq>
 80014e0:	4602      	mov	r2, r0
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	0a1b      	lsrs	r3, r3, #8
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	4903      	ldr	r1, [pc, #12]	; (80014fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80014ee:	5ccb      	ldrb	r3, [r1, r3]
 80014f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40021000 	.word	0x40021000
 80014fc:	08002370 	.word	0x08002370

08001500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001504:	f7ff ffde 	bl	80014c4 <HAL_RCC_GetHCLKFreq>
 8001508:	4602      	mov	r2, r0
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	0adb      	lsrs	r3, r3, #11
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	4903      	ldr	r1, [pc, #12]	; (8001524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001516:	5ccb      	ldrb	r3, [r1, r3]
 8001518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800151c:	4618      	mov	r0, r3
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	08002370 	.word	0x08002370

08001528 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <RCC_Delay+0x34>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <RCC_Delay+0x38>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	0a5b      	lsrs	r3, r3, #9
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	fb02 f303 	mul.w	r3, r2, r3
 8001542:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001544:	bf00      	nop
  }
  while (Delay --);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1e5a      	subs	r2, r3, #1
 800154a:	60fa      	str	r2, [r7, #12]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f9      	bne.n	8001544 <RCC_Delay+0x1c>
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	20000000 	.word	0x20000000
 8001560:	10624dd3 	.word	0x10624dd3

08001564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e03f      	b.n	80015f6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d106      	bne.n	8001590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7fe ff36 	bl	80003fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2224      	movs	r2, #36	; 0x24
 8001594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68da      	ldr	r2, [r3, #12]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 f905 	bl	80017b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	691a      	ldr	r2, [r3, #16]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	695a      	ldr	r2, [r3, #20]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2220      	movs	r2, #32
 80015e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2220      	movs	r2, #32
 80015f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b08a      	sub	sp, #40	; 0x28
 8001602:	af02      	add	r7, sp, #8
 8001604:	60f8      	str	r0, [r7, #12]
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	4613      	mov	r3, r2
 800160c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b20      	cmp	r3, #32
 800161c:	d17c      	bne.n	8001718 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <HAL_UART_Transmit+0x2c>
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e075      	b.n	800171a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001634:	2b01      	cmp	r3, #1
 8001636:	d101      	bne.n	800163c <HAL_UART_Transmit+0x3e>
 8001638:	2302      	movs	r3, #2
 800163a:	e06e      	b.n	800171a <HAL_UART_Transmit+0x11c>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2221      	movs	r2, #33	; 0x21
 800164e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001652:	f7ff f863 	bl	800071c <HAL_GetTick>
 8001656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	88fa      	ldrh	r2, [r7, #6]
 800165c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	88fa      	ldrh	r2, [r7, #6]
 8001662:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800166c:	d108      	bne.n	8001680 <HAL_UART_Transmit+0x82>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d104      	bne.n	8001680 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	61bb      	str	r3, [r7, #24]
 800167e:	e003      	b.n	8001688 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001690:	e02a      	b.n	80016e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2200      	movs	r2, #0
 800169a:	2180      	movs	r1, #128	; 0x80
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f000 f840 	bl	8001722 <UART_WaitOnFlagUntilTimeout>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e036      	b.n	800171a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10b      	bne.n	80016ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80016c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	3302      	adds	r3, #2
 80016c6:	61bb      	str	r3, [r7, #24]
 80016c8:	e007      	b.n	80016da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	781a      	ldrb	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	3301      	adds	r3, #1
 80016d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016de:	b29b      	uxth	r3, r3
 80016e0:	3b01      	subs	r3, #1
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1cf      	bne.n	8001692 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	2200      	movs	r2, #0
 80016fa:	2140      	movs	r1, #64	; 0x40
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 f810 	bl	8001722 <UART_WaitOnFlagUntilTimeout>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e006      	b.n	800171a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2220      	movs	r2, #32
 8001710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	e000      	b.n	800171a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001718:	2302      	movs	r3, #2
  }
}
 800171a:	4618      	mov	r0, r3
 800171c:	3720      	adds	r7, #32
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	603b      	str	r3, [r7, #0]
 800172e:	4613      	mov	r3, r2
 8001730:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001732:	e02c      	b.n	800178e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800173a:	d028      	beq.n	800178e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d007      	beq.n	8001752 <UART_WaitOnFlagUntilTimeout+0x30>
 8001742:	f7fe ffeb 	bl	800071c <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	429a      	cmp	r2, r3
 8001750:	d21d      	bcs.n	800178e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001760:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	695a      	ldr	r2, [r3, #20]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0201 	bic.w	r2, r2, #1
 8001770:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2220      	movs	r2, #32
 8001776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2220      	movs	r2, #32
 800177e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e00f      	b.n	80017ae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	4013      	ands	r3, r2
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	429a      	cmp	r2, r3
 800179c:	bf0c      	ite	eq
 800179e:	2301      	moveq	r3, #1
 80017a0:	2300      	movne	r3, #0
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d0c3      	beq.n	8001734 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80017f2:	f023 030c 	bic.w	r3, r3, #12
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6812      	ldr	r2, [r2, #0]
 80017fa:	68b9      	ldr	r1, [r7, #8]
 80017fc:	430b      	orrs	r3, r1
 80017fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699a      	ldr	r2, [r3, #24]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a2c      	ldr	r2, [pc, #176]	; (80018cc <UART_SetConfig+0x114>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d103      	bne.n	8001828 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001820:	f7ff fe6e 	bl	8001500 <HAL_RCC_GetPCLK2Freq>
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	e002      	b.n	800182e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001828:	f7ff fe56 	bl	80014d8 <HAL_RCC_GetPCLK1Freq>
 800182c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	009a      	lsls	r2, r3, #2
 8001838:	441a      	add	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	fbb2 f3f3 	udiv	r3, r2, r3
 8001844:	4a22      	ldr	r2, [pc, #136]	; (80018d0 <UART_SetConfig+0x118>)
 8001846:	fba2 2303 	umull	r2, r3, r2, r3
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	0119      	lsls	r1, r3, #4
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	009a      	lsls	r2, r3, #2
 8001858:	441a      	add	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	fbb2 f2f3 	udiv	r2, r2, r3
 8001864:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <UART_SetConfig+0x118>)
 8001866:	fba3 0302 	umull	r0, r3, r3, r2
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2064      	movs	r0, #100	; 0x64
 800186e:	fb00 f303 	mul.w	r3, r0, r3
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	3332      	adds	r3, #50	; 0x32
 8001878:	4a15      	ldr	r2, [pc, #84]	; (80018d0 <UART_SetConfig+0x118>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001884:	4419      	add	r1, r3
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	009a      	lsls	r2, r3, #2
 8001890:	441a      	add	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	fbb2 f2f3 	udiv	r2, r2, r3
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <UART_SetConfig+0x118>)
 800189e:	fba3 0302 	umull	r0, r3, r3, r2
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	2064      	movs	r0, #100	; 0x64
 80018a6:	fb00 f303 	mul.w	r3, r0, r3
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	3332      	adds	r3, #50	; 0x32
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <UART_SetConfig+0x118>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	095b      	lsrs	r3, r3, #5
 80018b8:	f003 020f 	and.w	r2, r3, #15
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	440a      	add	r2, r1
 80018c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80018c4:	bf00      	nop
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40013800 	.word	0x40013800
 80018d0:	51eb851f 	.word	0x51eb851f

080018d4 <__errno>:
 80018d4:	4b01      	ldr	r3, [pc, #4]	; (80018dc <__errno+0x8>)
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	2000000c 	.word	0x2000000c

080018e0 <__libc_init_array>:
 80018e0:	b570      	push	{r4, r5, r6, lr}
 80018e2:	2600      	movs	r6, #0
 80018e4:	4d0c      	ldr	r5, [pc, #48]	; (8001918 <__libc_init_array+0x38>)
 80018e6:	4c0d      	ldr	r4, [pc, #52]	; (800191c <__libc_init_array+0x3c>)
 80018e8:	1b64      	subs	r4, r4, r5
 80018ea:	10a4      	asrs	r4, r4, #2
 80018ec:	42a6      	cmp	r6, r4
 80018ee:	d109      	bne.n	8001904 <__libc_init_array+0x24>
 80018f0:	f000 fd18 	bl	8002324 <_init>
 80018f4:	2600      	movs	r6, #0
 80018f6:	4d0a      	ldr	r5, [pc, #40]	; (8001920 <__libc_init_array+0x40>)
 80018f8:	4c0a      	ldr	r4, [pc, #40]	; (8001924 <__libc_init_array+0x44>)
 80018fa:	1b64      	subs	r4, r4, r5
 80018fc:	10a4      	asrs	r4, r4, #2
 80018fe:	42a6      	cmp	r6, r4
 8001900:	d105      	bne.n	800190e <__libc_init_array+0x2e>
 8001902:	bd70      	pop	{r4, r5, r6, pc}
 8001904:	f855 3b04 	ldr.w	r3, [r5], #4
 8001908:	4798      	blx	r3
 800190a:	3601      	adds	r6, #1
 800190c:	e7ee      	b.n	80018ec <__libc_init_array+0xc>
 800190e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001912:	4798      	blx	r3
 8001914:	3601      	adds	r6, #1
 8001916:	e7f2      	b.n	80018fe <__libc_init_array+0x1e>
 8001918:	080023dc 	.word	0x080023dc
 800191c:	080023dc 	.word	0x080023dc
 8001920:	080023dc 	.word	0x080023dc
 8001924:	080023e0 	.word	0x080023e0

08001928 <memset>:
 8001928:	4603      	mov	r3, r0
 800192a:	4402      	add	r2, r0
 800192c:	4293      	cmp	r3, r2
 800192e:	d100      	bne.n	8001932 <memset+0xa>
 8001930:	4770      	bx	lr
 8001932:	f803 1b01 	strb.w	r1, [r3], #1
 8001936:	e7f9      	b.n	800192c <memset+0x4>

08001938 <_puts_r>:
 8001938:	b570      	push	{r4, r5, r6, lr}
 800193a:	460e      	mov	r6, r1
 800193c:	4605      	mov	r5, r0
 800193e:	b118      	cbz	r0, 8001948 <_puts_r+0x10>
 8001940:	6983      	ldr	r3, [r0, #24]
 8001942:	b90b      	cbnz	r3, 8001948 <_puts_r+0x10>
 8001944:	f000 fa44 	bl	8001dd0 <__sinit>
 8001948:	69ab      	ldr	r3, [r5, #24]
 800194a:	68ac      	ldr	r4, [r5, #8]
 800194c:	b913      	cbnz	r3, 8001954 <_puts_r+0x1c>
 800194e:	4628      	mov	r0, r5
 8001950:	f000 fa3e 	bl	8001dd0 <__sinit>
 8001954:	4b2c      	ldr	r3, [pc, #176]	; (8001a08 <_puts_r+0xd0>)
 8001956:	429c      	cmp	r4, r3
 8001958:	d120      	bne.n	800199c <_puts_r+0x64>
 800195a:	686c      	ldr	r4, [r5, #4]
 800195c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800195e:	07db      	lsls	r3, r3, #31
 8001960:	d405      	bmi.n	800196e <_puts_r+0x36>
 8001962:	89a3      	ldrh	r3, [r4, #12]
 8001964:	0598      	lsls	r0, r3, #22
 8001966:	d402      	bmi.n	800196e <_puts_r+0x36>
 8001968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800196a:	f000 facf 	bl	8001f0c <__retarget_lock_acquire_recursive>
 800196e:	89a3      	ldrh	r3, [r4, #12]
 8001970:	0719      	lsls	r1, r3, #28
 8001972:	d51d      	bpl.n	80019b0 <_puts_r+0x78>
 8001974:	6923      	ldr	r3, [r4, #16]
 8001976:	b1db      	cbz	r3, 80019b0 <_puts_r+0x78>
 8001978:	3e01      	subs	r6, #1
 800197a:	68a3      	ldr	r3, [r4, #8]
 800197c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001980:	3b01      	subs	r3, #1
 8001982:	60a3      	str	r3, [r4, #8]
 8001984:	bb39      	cbnz	r1, 80019d6 <_puts_r+0x9e>
 8001986:	2b00      	cmp	r3, #0
 8001988:	da38      	bge.n	80019fc <_puts_r+0xc4>
 800198a:	4622      	mov	r2, r4
 800198c:	210a      	movs	r1, #10
 800198e:	4628      	mov	r0, r5
 8001990:	f000 f848 	bl	8001a24 <__swbuf_r>
 8001994:	3001      	adds	r0, #1
 8001996:	d011      	beq.n	80019bc <_puts_r+0x84>
 8001998:	250a      	movs	r5, #10
 800199a:	e011      	b.n	80019c0 <_puts_r+0x88>
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <_puts_r+0xd4>)
 800199e:	429c      	cmp	r4, r3
 80019a0:	d101      	bne.n	80019a6 <_puts_r+0x6e>
 80019a2:	68ac      	ldr	r4, [r5, #8]
 80019a4:	e7da      	b.n	800195c <_puts_r+0x24>
 80019a6:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <_puts_r+0xd8>)
 80019a8:	429c      	cmp	r4, r3
 80019aa:	bf08      	it	eq
 80019ac:	68ec      	ldreq	r4, [r5, #12]
 80019ae:	e7d5      	b.n	800195c <_puts_r+0x24>
 80019b0:	4621      	mov	r1, r4
 80019b2:	4628      	mov	r0, r5
 80019b4:	f000 f888 	bl	8001ac8 <__swsetup_r>
 80019b8:	2800      	cmp	r0, #0
 80019ba:	d0dd      	beq.n	8001978 <_puts_r+0x40>
 80019bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80019c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80019c2:	07da      	lsls	r2, r3, #31
 80019c4:	d405      	bmi.n	80019d2 <_puts_r+0x9a>
 80019c6:	89a3      	ldrh	r3, [r4, #12]
 80019c8:	059b      	lsls	r3, r3, #22
 80019ca:	d402      	bmi.n	80019d2 <_puts_r+0x9a>
 80019cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80019ce:	f000 fa9e 	bl	8001f0e <__retarget_lock_release_recursive>
 80019d2:	4628      	mov	r0, r5
 80019d4:	bd70      	pop	{r4, r5, r6, pc}
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	da04      	bge.n	80019e4 <_puts_r+0xac>
 80019da:	69a2      	ldr	r2, [r4, #24]
 80019dc:	429a      	cmp	r2, r3
 80019de:	dc06      	bgt.n	80019ee <_puts_r+0xb6>
 80019e0:	290a      	cmp	r1, #10
 80019e2:	d004      	beq.n	80019ee <_puts_r+0xb6>
 80019e4:	6823      	ldr	r3, [r4, #0]
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	6022      	str	r2, [r4, #0]
 80019ea:	7019      	strb	r1, [r3, #0]
 80019ec:	e7c5      	b.n	800197a <_puts_r+0x42>
 80019ee:	4622      	mov	r2, r4
 80019f0:	4628      	mov	r0, r5
 80019f2:	f000 f817 	bl	8001a24 <__swbuf_r>
 80019f6:	3001      	adds	r0, #1
 80019f8:	d1bf      	bne.n	800197a <_puts_r+0x42>
 80019fa:	e7df      	b.n	80019bc <_puts_r+0x84>
 80019fc:	250a      	movs	r5, #10
 80019fe:	6823      	ldr	r3, [r4, #0]
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	6022      	str	r2, [r4, #0]
 8001a04:	701d      	strb	r5, [r3, #0]
 8001a06:	e7db      	b.n	80019c0 <_puts_r+0x88>
 8001a08:	0800239c 	.word	0x0800239c
 8001a0c:	080023bc 	.word	0x080023bc
 8001a10:	0800237c 	.word	0x0800237c

08001a14 <puts>:
 8001a14:	4b02      	ldr	r3, [pc, #8]	; (8001a20 <puts+0xc>)
 8001a16:	4601      	mov	r1, r0
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	f7ff bf8d 	b.w	8001938 <_puts_r>
 8001a1e:	bf00      	nop
 8001a20:	2000000c 	.word	0x2000000c

08001a24 <__swbuf_r>:
 8001a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a26:	460e      	mov	r6, r1
 8001a28:	4614      	mov	r4, r2
 8001a2a:	4605      	mov	r5, r0
 8001a2c:	b118      	cbz	r0, 8001a36 <__swbuf_r+0x12>
 8001a2e:	6983      	ldr	r3, [r0, #24]
 8001a30:	b90b      	cbnz	r3, 8001a36 <__swbuf_r+0x12>
 8001a32:	f000 f9cd 	bl	8001dd0 <__sinit>
 8001a36:	4b21      	ldr	r3, [pc, #132]	; (8001abc <__swbuf_r+0x98>)
 8001a38:	429c      	cmp	r4, r3
 8001a3a:	d12b      	bne.n	8001a94 <__swbuf_r+0x70>
 8001a3c:	686c      	ldr	r4, [r5, #4]
 8001a3e:	69a3      	ldr	r3, [r4, #24]
 8001a40:	60a3      	str	r3, [r4, #8]
 8001a42:	89a3      	ldrh	r3, [r4, #12]
 8001a44:	071a      	lsls	r2, r3, #28
 8001a46:	d52f      	bpl.n	8001aa8 <__swbuf_r+0x84>
 8001a48:	6923      	ldr	r3, [r4, #16]
 8001a4a:	b36b      	cbz	r3, 8001aa8 <__swbuf_r+0x84>
 8001a4c:	6923      	ldr	r3, [r4, #16]
 8001a4e:	6820      	ldr	r0, [r4, #0]
 8001a50:	b2f6      	uxtb	r6, r6
 8001a52:	1ac0      	subs	r0, r0, r3
 8001a54:	6963      	ldr	r3, [r4, #20]
 8001a56:	4637      	mov	r7, r6
 8001a58:	4283      	cmp	r3, r0
 8001a5a:	dc04      	bgt.n	8001a66 <__swbuf_r+0x42>
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	4628      	mov	r0, r5
 8001a60:	f000 f922 	bl	8001ca8 <_fflush_r>
 8001a64:	bb30      	cbnz	r0, 8001ab4 <__swbuf_r+0x90>
 8001a66:	68a3      	ldr	r3, [r4, #8]
 8001a68:	3001      	adds	r0, #1
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	60a3      	str	r3, [r4, #8]
 8001a6e:	6823      	ldr	r3, [r4, #0]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	6022      	str	r2, [r4, #0]
 8001a74:	701e      	strb	r6, [r3, #0]
 8001a76:	6963      	ldr	r3, [r4, #20]
 8001a78:	4283      	cmp	r3, r0
 8001a7a:	d004      	beq.n	8001a86 <__swbuf_r+0x62>
 8001a7c:	89a3      	ldrh	r3, [r4, #12]
 8001a7e:	07db      	lsls	r3, r3, #31
 8001a80:	d506      	bpl.n	8001a90 <__swbuf_r+0x6c>
 8001a82:	2e0a      	cmp	r6, #10
 8001a84:	d104      	bne.n	8001a90 <__swbuf_r+0x6c>
 8001a86:	4621      	mov	r1, r4
 8001a88:	4628      	mov	r0, r5
 8001a8a:	f000 f90d 	bl	8001ca8 <_fflush_r>
 8001a8e:	b988      	cbnz	r0, 8001ab4 <__swbuf_r+0x90>
 8001a90:	4638      	mov	r0, r7
 8001a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <__swbuf_r+0x9c>)
 8001a96:	429c      	cmp	r4, r3
 8001a98:	d101      	bne.n	8001a9e <__swbuf_r+0x7a>
 8001a9a:	68ac      	ldr	r4, [r5, #8]
 8001a9c:	e7cf      	b.n	8001a3e <__swbuf_r+0x1a>
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <__swbuf_r+0xa0>)
 8001aa0:	429c      	cmp	r4, r3
 8001aa2:	bf08      	it	eq
 8001aa4:	68ec      	ldreq	r4, [r5, #12]
 8001aa6:	e7ca      	b.n	8001a3e <__swbuf_r+0x1a>
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	4628      	mov	r0, r5
 8001aac:	f000 f80c 	bl	8001ac8 <__swsetup_r>
 8001ab0:	2800      	cmp	r0, #0
 8001ab2:	d0cb      	beq.n	8001a4c <__swbuf_r+0x28>
 8001ab4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001ab8:	e7ea      	b.n	8001a90 <__swbuf_r+0x6c>
 8001aba:	bf00      	nop
 8001abc:	0800239c 	.word	0x0800239c
 8001ac0:	080023bc 	.word	0x080023bc
 8001ac4:	0800237c 	.word	0x0800237c

08001ac8 <__swsetup_r>:
 8001ac8:	4b32      	ldr	r3, [pc, #200]	; (8001b94 <__swsetup_r+0xcc>)
 8001aca:	b570      	push	{r4, r5, r6, lr}
 8001acc:	681d      	ldr	r5, [r3, #0]
 8001ace:	4606      	mov	r6, r0
 8001ad0:	460c      	mov	r4, r1
 8001ad2:	b125      	cbz	r5, 8001ade <__swsetup_r+0x16>
 8001ad4:	69ab      	ldr	r3, [r5, #24]
 8001ad6:	b913      	cbnz	r3, 8001ade <__swsetup_r+0x16>
 8001ad8:	4628      	mov	r0, r5
 8001ada:	f000 f979 	bl	8001dd0 <__sinit>
 8001ade:	4b2e      	ldr	r3, [pc, #184]	; (8001b98 <__swsetup_r+0xd0>)
 8001ae0:	429c      	cmp	r4, r3
 8001ae2:	d10f      	bne.n	8001b04 <__swsetup_r+0x3c>
 8001ae4:	686c      	ldr	r4, [r5, #4]
 8001ae6:	89a3      	ldrh	r3, [r4, #12]
 8001ae8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001aec:	0719      	lsls	r1, r3, #28
 8001aee:	d42c      	bmi.n	8001b4a <__swsetup_r+0x82>
 8001af0:	06dd      	lsls	r5, r3, #27
 8001af2:	d411      	bmi.n	8001b18 <__swsetup_r+0x50>
 8001af4:	2309      	movs	r3, #9
 8001af6:	6033      	str	r3, [r6, #0]
 8001af8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b00:	81a3      	strh	r3, [r4, #12]
 8001b02:	e03e      	b.n	8001b82 <__swsetup_r+0xba>
 8001b04:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <__swsetup_r+0xd4>)
 8001b06:	429c      	cmp	r4, r3
 8001b08:	d101      	bne.n	8001b0e <__swsetup_r+0x46>
 8001b0a:	68ac      	ldr	r4, [r5, #8]
 8001b0c:	e7eb      	b.n	8001ae6 <__swsetup_r+0x1e>
 8001b0e:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <__swsetup_r+0xd8>)
 8001b10:	429c      	cmp	r4, r3
 8001b12:	bf08      	it	eq
 8001b14:	68ec      	ldreq	r4, [r5, #12]
 8001b16:	e7e6      	b.n	8001ae6 <__swsetup_r+0x1e>
 8001b18:	0758      	lsls	r0, r3, #29
 8001b1a:	d512      	bpl.n	8001b42 <__swsetup_r+0x7a>
 8001b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b1e:	b141      	cbz	r1, 8001b32 <__swsetup_r+0x6a>
 8001b20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b24:	4299      	cmp	r1, r3
 8001b26:	d002      	beq.n	8001b2e <__swsetup_r+0x66>
 8001b28:	4630      	mov	r0, r6
 8001b2a:	f000 fa57 	bl	8001fdc <_free_r>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	6363      	str	r3, [r4, #52]	; 0x34
 8001b32:	89a3      	ldrh	r3, [r4, #12]
 8001b34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001b38:	81a3      	strh	r3, [r4, #12]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	6063      	str	r3, [r4, #4]
 8001b3e:	6923      	ldr	r3, [r4, #16]
 8001b40:	6023      	str	r3, [r4, #0]
 8001b42:	89a3      	ldrh	r3, [r4, #12]
 8001b44:	f043 0308 	orr.w	r3, r3, #8
 8001b48:	81a3      	strh	r3, [r4, #12]
 8001b4a:	6923      	ldr	r3, [r4, #16]
 8001b4c:	b94b      	cbnz	r3, 8001b62 <__swsetup_r+0x9a>
 8001b4e:	89a3      	ldrh	r3, [r4, #12]
 8001b50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b58:	d003      	beq.n	8001b62 <__swsetup_r+0x9a>
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	4630      	mov	r0, r6
 8001b5e:	f000 f9fd 	bl	8001f5c <__smakebuf_r>
 8001b62:	89a0      	ldrh	r0, [r4, #12]
 8001b64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b68:	f010 0301 	ands.w	r3, r0, #1
 8001b6c:	d00a      	beq.n	8001b84 <__swsetup_r+0xbc>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60a3      	str	r3, [r4, #8]
 8001b72:	6963      	ldr	r3, [r4, #20]
 8001b74:	425b      	negs	r3, r3
 8001b76:	61a3      	str	r3, [r4, #24]
 8001b78:	6923      	ldr	r3, [r4, #16]
 8001b7a:	b943      	cbnz	r3, 8001b8e <__swsetup_r+0xc6>
 8001b7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001b80:	d1ba      	bne.n	8001af8 <__swsetup_r+0x30>
 8001b82:	bd70      	pop	{r4, r5, r6, pc}
 8001b84:	0781      	lsls	r1, r0, #30
 8001b86:	bf58      	it	pl
 8001b88:	6963      	ldrpl	r3, [r4, #20]
 8001b8a:	60a3      	str	r3, [r4, #8]
 8001b8c:	e7f4      	b.n	8001b78 <__swsetup_r+0xb0>
 8001b8e:	2000      	movs	r0, #0
 8001b90:	e7f7      	b.n	8001b82 <__swsetup_r+0xba>
 8001b92:	bf00      	nop
 8001b94:	2000000c 	.word	0x2000000c
 8001b98:	0800239c 	.word	0x0800239c
 8001b9c:	080023bc 	.word	0x080023bc
 8001ba0:	0800237c 	.word	0x0800237c

08001ba4 <__sflush_r>:
 8001ba4:	898a      	ldrh	r2, [r1, #12]
 8001ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ba8:	4605      	mov	r5, r0
 8001baa:	0710      	lsls	r0, r2, #28
 8001bac:	460c      	mov	r4, r1
 8001bae:	d457      	bmi.n	8001c60 <__sflush_r+0xbc>
 8001bb0:	684b      	ldr	r3, [r1, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	dc04      	bgt.n	8001bc0 <__sflush_r+0x1c>
 8001bb6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	dc01      	bgt.n	8001bc0 <__sflush_r+0x1c>
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bc2:	2e00      	cmp	r6, #0
 8001bc4:	d0fa      	beq.n	8001bbc <__sflush_r+0x18>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001bcc:	682f      	ldr	r7, [r5, #0]
 8001bce:	602b      	str	r3, [r5, #0]
 8001bd0:	d032      	beq.n	8001c38 <__sflush_r+0x94>
 8001bd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001bd4:	89a3      	ldrh	r3, [r4, #12]
 8001bd6:	075a      	lsls	r2, r3, #29
 8001bd8:	d505      	bpl.n	8001be6 <__sflush_r+0x42>
 8001bda:	6863      	ldr	r3, [r4, #4]
 8001bdc:	1ac0      	subs	r0, r0, r3
 8001bde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001be0:	b10b      	cbz	r3, 8001be6 <__sflush_r+0x42>
 8001be2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001be4:	1ac0      	subs	r0, r0, r3
 8001be6:	2300      	movs	r3, #0
 8001be8:	4602      	mov	r2, r0
 8001bea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bec:	4628      	mov	r0, r5
 8001bee:	6a21      	ldr	r1, [r4, #32]
 8001bf0:	47b0      	blx	r6
 8001bf2:	1c43      	adds	r3, r0, #1
 8001bf4:	89a3      	ldrh	r3, [r4, #12]
 8001bf6:	d106      	bne.n	8001c06 <__sflush_r+0x62>
 8001bf8:	6829      	ldr	r1, [r5, #0]
 8001bfa:	291d      	cmp	r1, #29
 8001bfc:	d82c      	bhi.n	8001c58 <__sflush_r+0xb4>
 8001bfe:	4a29      	ldr	r2, [pc, #164]	; (8001ca4 <__sflush_r+0x100>)
 8001c00:	40ca      	lsrs	r2, r1
 8001c02:	07d6      	lsls	r6, r2, #31
 8001c04:	d528      	bpl.n	8001c58 <__sflush_r+0xb4>
 8001c06:	2200      	movs	r2, #0
 8001c08:	6062      	str	r2, [r4, #4]
 8001c0a:	6922      	ldr	r2, [r4, #16]
 8001c0c:	04d9      	lsls	r1, r3, #19
 8001c0e:	6022      	str	r2, [r4, #0]
 8001c10:	d504      	bpl.n	8001c1c <__sflush_r+0x78>
 8001c12:	1c42      	adds	r2, r0, #1
 8001c14:	d101      	bne.n	8001c1a <__sflush_r+0x76>
 8001c16:	682b      	ldr	r3, [r5, #0]
 8001c18:	b903      	cbnz	r3, 8001c1c <__sflush_r+0x78>
 8001c1a:	6560      	str	r0, [r4, #84]	; 0x54
 8001c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c1e:	602f      	str	r7, [r5, #0]
 8001c20:	2900      	cmp	r1, #0
 8001c22:	d0cb      	beq.n	8001bbc <__sflush_r+0x18>
 8001c24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c28:	4299      	cmp	r1, r3
 8001c2a:	d002      	beq.n	8001c32 <__sflush_r+0x8e>
 8001c2c:	4628      	mov	r0, r5
 8001c2e:	f000 f9d5 	bl	8001fdc <_free_r>
 8001c32:	2000      	movs	r0, #0
 8001c34:	6360      	str	r0, [r4, #52]	; 0x34
 8001c36:	e7c2      	b.n	8001bbe <__sflush_r+0x1a>
 8001c38:	6a21      	ldr	r1, [r4, #32]
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	4628      	mov	r0, r5
 8001c3e:	47b0      	blx	r6
 8001c40:	1c41      	adds	r1, r0, #1
 8001c42:	d1c7      	bne.n	8001bd4 <__sflush_r+0x30>
 8001c44:	682b      	ldr	r3, [r5, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0c4      	beq.n	8001bd4 <__sflush_r+0x30>
 8001c4a:	2b1d      	cmp	r3, #29
 8001c4c:	d001      	beq.n	8001c52 <__sflush_r+0xae>
 8001c4e:	2b16      	cmp	r3, #22
 8001c50:	d101      	bne.n	8001c56 <__sflush_r+0xb2>
 8001c52:	602f      	str	r7, [r5, #0]
 8001c54:	e7b2      	b.n	8001bbc <__sflush_r+0x18>
 8001c56:	89a3      	ldrh	r3, [r4, #12]
 8001c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c5c:	81a3      	strh	r3, [r4, #12]
 8001c5e:	e7ae      	b.n	8001bbe <__sflush_r+0x1a>
 8001c60:	690f      	ldr	r7, [r1, #16]
 8001c62:	2f00      	cmp	r7, #0
 8001c64:	d0aa      	beq.n	8001bbc <__sflush_r+0x18>
 8001c66:	0793      	lsls	r3, r2, #30
 8001c68:	bf18      	it	ne
 8001c6a:	2300      	movne	r3, #0
 8001c6c:	680e      	ldr	r6, [r1, #0]
 8001c6e:	bf08      	it	eq
 8001c70:	694b      	ldreq	r3, [r1, #20]
 8001c72:	1bf6      	subs	r6, r6, r7
 8001c74:	600f      	str	r7, [r1, #0]
 8001c76:	608b      	str	r3, [r1, #8]
 8001c78:	2e00      	cmp	r6, #0
 8001c7a:	dd9f      	ble.n	8001bbc <__sflush_r+0x18>
 8001c7c:	4633      	mov	r3, r6
 8001c7e:	463a      	mov	r2, r7
 8001c80:	4628      	mov	r0, r5
 8001c82:	6a21      	ldr	r1, [r4, #32]
 8001c84:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001c88:	47e0      	blx	ip
 8001c8a:	2800      	cmp	r0, #0
 8001c8c:	dc06      	bgt.n	8001c9c <__sflush_r+0xf8>
 8001c8e:	89a3      	ldrh	r3, [r4, #12]
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c98:	81a3      	strh	r3, [r4, #12]
 8001c9a:	e790      	b.n	8001bbe <__sflush_r+0x1a>
 8001c9c:	4407      	add	r7, r0
 8001c9e:	1a36      	subs	r6, r6, r0
 8001ca0:	e7ea      	b.n	8001c78 <__sflush_r+0xd4>
 8001ca2:	bf00      	nop
 8001ca4:	20400001 	.word	0x20400001

08001ca8 <_fflush_r>:
 8001ca8:	b538      	push	{r3, r4, r5, lr}
 8001caa:	690b      	ldr	r3, [r1, #16]
 8001cac:	4605      	mov	r5, r0
 8001cae:	460c      	mov	r4, r1
 8001cb0:	b913      	cbnz	r3, 8001cb8 <_fflush_r+0x10>
 8001cb2:	2500      	movs	r5, #0
 8001cb4:	4628      	mov	r0, r5
 8001cb6:	bd38      	pop	{r3, r4, r5, pc}
 8001cb8:	b118      	cbz	r0, 8001cc2 <_fflush_r+0x1a>
 8001cba:	6983      	ldr	r3, [r0, #24]
 8001cbc:	b90b      	cbnz	r3, 8001cc2 <_fflush_r+0x1a>
 8001cbe:	f000 f887 	bl	8001dd0 <__sinit>
 8001cc2:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <_fflush_r+0x6c>)
 8001cc4:	429c      	cmp	r4, r3
 8001cc6:	d11b      	bne.n	8001d00 <_fflush_r+0x58>
 8001cc8:	686c      	ldr	r4, [r5, #4]
 8001cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0ef      	beq.n	8001cb2 <_fflush_r+0xa>
 8001cd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001cd4:	07d0      	lsls	r0, r2, #31
 8001cd6:	d404      	bmi.n	8001ce2 <_fflush_r+0x3a>
 8001cd8:	0599      	lsls	r1, r3, #22
 8001cda:	d402      	bmi.n	8001ce2 <_fflush_r+0x3a>
 8001cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001cde:	f000 f915 	bl	8001f0c <__retarget_lock_acquire_recursive>
 8001ce2:	4628      	mov	r0, r5
 8001ce4:	4621      	mov	r1, r4
 8001ce6:	f7ff ff5d 	bl	8001ba4 <__sflush_r>
 8001cea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001cec:	4605      	mov	r5, r0
 8001cee:	07da      	lsls	r2, r3, #31
 8001cf0:	d4e0      	bmi.n	8001cb4 <_fflush_r+0xc>
 8001cf2:	89a3      	ldrh	r3, [r4, #12]
 8001cf4:	059b      	lsls	r3, r3, #22
 8001cf6:	d4dd      	bmi.n	8001cb4 <_fflush_r+0xc>
 8001cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001cfa:	f000 f908 	bl	8001f0e <__retarget_lock_release_recursive>
 8001cfe:	e7d9      	b.n	8001cb4 <_fflush_r+0xc>
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <_fflush_r+0x70>)
 8001d02:	429c      	cmp	r4, r3
 8001d04:	d101      	bne.n	8001d0a <_fflush_r+0x62>
 8001d06:	68ac      	ldr	r4, [r5, #8]
 8001d08:	e7df      	b.n	8001cca <_fflush_r+0x22>
 8001d0a:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <_fflush_r+0x74>)
 8001d0c:	429c      	cmp	r4, r3
 8001d0e:	bf08      	it	eq
 8001d10:	68ec      	ldreq	r4, [r5, #12]
 8001d12:	e7da      	b.n	8001cca <_fflush_r+0x22>
 8001d14:	0800239c 	.word	0x0800239c
 8001d18:	080023bc 	.word	0x080023bc
 8001d1c:	0800237c 	.word	0x0800237c

08001d20 <std>:
 8001d20:	2300      	movs	r3, #0
 8001d22:	b510      	push	{r4, lr}
 8001d24:	4604      	mov	r4, r0
 8001d26:	e9c0 3300 	strd	r3, r3, [r0]
 8001d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001d2e:	6083      	str	r3, [r0, #8]
 8001d30:	8181      	strh	r1, [r0, #12]
 8001d32:	6643      	str	r3, [r0, #100]	; 0x64
 8001d34:	81c2      	strh	r2, [r0, #14]
 8001d36:	6183      	str	r3, [r0, #24]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	2208      	movs	r2, #8
 8001d3c:	305c      	adds	r0, #92	; 0x5c
 8001d3e:	f7ff fdf3 	bl	8001928 <memset>
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <std+0x38>)
 8001d44:	6224      	str	r4, [r4, #32]
 8001d46:	6263      	str	r3, [r4, #36]	; 0x24
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <std+0x3c>)
 8001d4a:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d4c:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <std+0x40>)
 8001d4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <std+0x44>)
 8001d52:	6323      	str	r3, [r4, #48]	; 0x30
 8001d54:	bd10      	pop	{r4, pc}
 8001d56:	bf00      	nop
 8001d58:	080021b5 	.word	0x080021b5
 8001d5c:	080021d7 	.word	0x080021d7
 8001d60:	0800220f 	.word	0x0800220f
 8001d64:	08002233 	.word	0x08002233

08001d68 <_cleanup_r>:
 8001d68:	4901      	ldr	r1, [pc, #4]	; (8001d70 <_cleanup_r+0x8>)
 8001d6a:	f000 b8af 	b.w	8001ecc <_fwalk_reent>
 8001d6e:	bf00      	nop
 8001d70:	08001ca9 	.word	0x08001ca9

08001d74 <__sfmoreglue>:
 8001d74:	2268      	movs	r2, #104	; 0x68
 8001d76:	b570      	push	{r4, r5, r6, lr}
 8001d78:	1e4d      	subs	r5, r1, #1
 8001d7a:	4355      	muls	r5, r2
 8001d7c:	460e      	mov	r6, r1
 8001d7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001d82:	f000 f993 	bl	80020ac <_malloc_r>
 8001d86:	4604      	mov	r4, r0
 8001d88:	b140      	cbz	r0, 8001d9c <__sfmoreglue+0x28>
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	e9c0 1600 	strd	r1, r6, [r0]
 8001d90:	300c      	adds	r0, #12
 8001d92:	60a0      	str	r0, [r4, #8]
 8001d94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001d98:	f7ff fdc6 	bl	8001928 <memset>
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	bd70      	pop	{r4, r5, r6, pc}

08001da0 <__sfp_lock_acquire>:
 8001da0:	4801      	ldr	r0, [pc, #4]	; (8001da8 <__sfp_lock_acquire+0x8>)
 8001da2:	f000 b8b3 	b.w	8001f0c <__retarget_lock_acquire_recursive>
 8001da6:	bf00      	nop
 8001da8:	200000d9 	.word	0x200000d9

08001dac <__sfp_lock_release>:
 8001dac:	4801      	ldr	r0, [pc, #4]	; (8001db4 <__sfp_lock_release+0x8>)
 8001dae:	f000 b8ae 	b.w	8001f0e <__retarget_lock_release_recursive>
 8001db2:	bf00      	nop
 8001db4:	200000d9 	.word	0x200000d9

08001db8 <__sinit_lock_acquire>:
 8001db8:	4801      	ldr	r0, [pc, #4]	; (8001dc0 <__sinit_lock_acquire+0x8>)
 8001dba:	f000 b8a7 	b.w	8001f0c <__retarget_lock_acquire_recursive>
 8001dbe:	bf00      	nop
 8001dc0:	200000da 	.word	0x200000da

08001dc4 <__sinit_lock_release>:
 8001dc4:	4801      	ldr	r0, [pc, #4]	; (8001dcc <__sinit_lock_release+0x8>)
 8001dc6:	f000 b8a2 	b.w	8001f0e <__retarget_lock_release_recursive>
 8001dca:	bf00      	nop
 8001dcc:	200000da 	.word	0x200000da

08001dd0 <__sinit>:
 8001dd0:	b510      	push	{r4, lr}
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	f7ff fff0 	bl	8001db8 <__sinit_lock_acquire>
 8001dd8:	69a3      	ldr	r3, [r4, #24]
 8001dda:	b11b      	cbz	r3, 8001de4 <__sinit+0x14>
 8001ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001de0:	f7ff bff0 	b.w	8001dc4 <__sinit_lock_release>
 8001de4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001de8:	6523      	str	r3, [r4, #80]	; 0x50
 8001dea:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <__sinit+0x68>)
 8001dec:	4a13      	ldr	r2, [pc, #76]	; (8001e3c <__sinit+0x6c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	62a2      	str	r2, [r4, #40]	; 0x28
 8001df2:	42a3      	cmp	r3, r4
 8001df4:	bf08      	it	eq
 8001df6:	2301      	moveq	r3, #1
 8001df8:	4620      	mov	r0, r4
 8001dfa:	bf08      	it	eq
 8001dfc:	61a3      	streq	r3, [r4, #24]
 8001dfe:	f000 f81f 	bl	8001e40 <__sfp>
 8001e02:	6060      	str	r0, [r4, #4]
 8001e04:	4620      	mov	r0, r4
 8001e06:	f000 f81b 	bl	8001e40 <__sfp>
 8001e0a:	60a0      	str	r0, [r4, #8]
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	f000 f817 	bl	8001e40 <__sfp>
 8001e12:	2200      	movs	r2, #0
 8001e14:	2104      	movs	r1, #4
 8001e16:	60e0      	str	r0, [r4, #12]
 8001e18:	6860      	ldr	r0, [r4, #4]
 8001e1a:	f7ff ff81 	bl	8001d20 <std>
 8001e1e:	2201      	movs	r2, #1
 8001e20:	2109      	movs	r1, #9
 8001e22:	68a0      	ldr	r0, [r4, #8]
 8001e24:	f7ff ff7c 	bl	8001d20 <std>
 8001e28:	2202      	movs	r2, #2
 8001e2a:	2112      	movs	r1, #18
 8001e2c:	68e0      	ldr	r0, [r4, #12]
 8001e2e:	f7ff ff77 	bl	8001d20 <std>
 8001e32:	2301      	movs	r3, #1
 8001e34:	61a3      	str	r3, [r4, #24]
 8001e36:	e7d1      	b.n	8001ddc <__sinit+0xc>
 8001e38:	08002378 	.word	0x08002378
 8001e3c:	08001d69 	.word	0x08001d69

08001e40 <__sfp>:
 8001e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e42:	4607      	mov	r7, r0
 8001e44:	f7ff ffac 	bl	8001da0 <__sfp_lock_acquire>
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <__sfp+0x84>)
 8001e4a:	681e      	ldr	r6, [r3, #0]
 8001e4c:	69b3      	ldr	r3, [r6, #24]
 8001e4e:	b913      	cbnz	r3, 8001e56 <__sfp+0x16>
 8001e50:	4630      	mov	r0, r6
 8001e52:	f7ff ffbd 	bl	8001dd0 <__sinit>
 8001e56:	3648      	adds	r6, #72	; 0x48
 8001e58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	d503      	bpl.n	8001e68 <__sfp+0x28>
 8001e60:	6833      	ldr	r3, [r6, #0]
 8001e62:	b30b      	cbz	r3, 8001ea8 <__sfp+0x68>
 8001e64:	6836      	ldr	r6, [r6, #0]
 8001e66:	e7f7      	b.n	8001e58 <__sfp+0x18>
 8001e68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001e6c:	b9d5      	cbnz	r5, 8001ea4 <__sfp+0x64>
 8001e6e:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <__sfp+0x88>)
 8001e70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001e74:	60e3      	str	r3, [r4, #12]
 8001e76:	6665      	str	r5, [r4, #100]	; 0x64
 8001e78:	f000 f847 	bl	8001f0a <__retarget_lock_init_recursive>
 8001e7c:	f7ff ff96 	bl	8001dac <__sfp_lock_release>
 8001e80:	2208      	movs	r2, #8
 8001e82:	4629      	mov	r1, r5
 8001e84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001e88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001e8c:	6025      	str	r5, [r4, #0]
 8001e8e:	61a5      	str	r5, [r4, #24]
 8001e90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001e94:	f7ff fd48 	bl	8001928 <memset>
 8001e98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001e9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ea4:	3468      	adds	r4, #104	; 0x68
 8001ea6:	e7d9      	b.n	8001e5c <__sfp+0x1c>
 8001ea8:	2104      	movs	r1, #4
 8001eaa:	4638      	mov	r0, r7
 8001eac:	f7ff ff62 	bl	8001d74 <__sfmoreglue>
 8001eb0:	4604      	mov	r4, r0
 8001eb2:	6030      	str	r0, [r6, #0]
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	d1d5      	bne.n	8001e64 <__sfp+0x24>
 8001eb8:	f7ff ff78 	bl	8001dac <__sfp_lock_release>
 8001ebc:	230c      	movs	r3, #12
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	e7ee      	b.n	8001ea0 <__sfp+0x60>
 8001ec2:	bf00      	nop
 8001ec4:	08002378 	.word	0x08002378
 8001ec8:	ffff0001 	.word	0xffff0001

08001ecc <_fwalk_reent>:
 8001ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ed0:	4606      	mov	r6, r0
 8001ed2:	4688      	mov	r8, r1
 8001ed4:	2700      	movs	r7, #0
 8001ed6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001eda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001ede:	f1b9 0901 	subs.w	r9, r9, #1
 8001ee2:	d505      	bpl.n	8001ef0 <_fwalk_reent+0x24>
 8001ee4:	6824      	ldr	r4, [r4, #0]
 8001ee6:	2c00      	cmp	r4, #0
 8001ee8:	d1f7      	bne.n	8001eda <_fwalk_reent+0xe>
 8001eea:	4638      	mov	r0, r7
 8001eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ef0:	89ab      	ldrh	r3, [r5, #12]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d907      	bls.n	8001f06 <_fwalk_reent+0x3a>
 8001ef6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001efa:	3301      	adds	r3, #1
 8001efc:	d003      	beq.n	8001f06 <_fwalk_reent+0x3a>
 8001efe:	4629      	mov	r1, r5
 8001f00:	4630      	mov	r0, r6
 8001f02:	47c0      	blx	r8
 8001f04:	4307      	orrs	r7, r0
 8001f06:	3568      	adds	r5, #104	; 0x68
 8001f08:	e7e9      	b.n	8001ede <_fwalk_reent+0x12>

08001f0a <__retarget_lock_init_recursive>:
 8001f0a:	4770      	bx	lr

08001f0c <__retarget_lock_acquire_recursive>:
 8001f0c:	4770      	bx	lr

08001f0e <__retarget_lock_release_recursive>:
 8001f0e:	4770      	bx	lr

08001f10 <__swhatbuf_r>:
 8001f10:	b570      	push	{r4, r5, r6, lr}
 8001f12:	460e      	mov	r6, r1
 8001f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f18:	4614      	mov	r4, r2
 8001f1a:	2900      	cmp	r1, #0
 8001f1c:	461d      	mov	r5, r3
 8001f1e:	b096      	sub	sp, #88	; 0x58
 8001f20:	da08      	bge.n	8001f34 <__swhatbuf_r+0x24>
 8001f22:	2200      	movs	r2, #0
 8001f24:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001f28:	602a      	str	r2, [r5, #0]
 8001f2a:	061a      	lsls	r2, r3, #24
 8001f2c:	d410      	bmi.n	8001f50 <__swhatbuf_r+0x40>
 8001f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f32:	e00e      	b.n	8001f52 <__swhatbuf_r+0x42>
 8001f34:	466a      	mov	r2, sp
 8001f36:	f000 f9a3 	bl	8002280 <_fstat_r>
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	dbf1      	blt.n	8001f22 <__swhatbuf_r+0x12>
 8001f3e:	9a01      	ldr	r2, [sp, #4]
 8001f40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001f44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001f48:	425a      	negs	r2, r3
 8001f4a:	415a      	adcs	r2, r3
 8001f4c:	602a      	str	r2, [r5, #0]
 8001f4e:	e7ee      	b.n	8001f2e <__swhatbuf_r+0x1e>
 8001f50:	2340      	movs	r3, #64	; 0x40
 8001f52:	2000      	movs	r0, #0
 8001f54:	6023      	str	r3, [r4, #0]
 8001f56:	b016      	add	sp, #88	; 0x58
 8001f58:	bd70      	pop	{r4, r5, r6, pc}
	...

08001f5c <__smakebuf_r>:
 8001f5c:	898b      	ldrh	r3, [r1, #12]
 8001f5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f60:	079d      	lsls	r5, r3, #30
 8001f62:	4606      	mov	r6, r0
 8001f64:	460c      	mov	r4, r1
 8001f66:	d507      	bpl.n	8001f78 <__smakebuf_r+0x1c>
 8001f68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001f6c:	6023      	str	r3, [r4, #0]
 8001f6e:	6123      	str	r3, [r4, #16]
 8001f70:	2301      	movs	r3, #1
 8001f72:	6163      	str	r3, [r4, #20]
 8001f74:	b002      	add	sp, #8
 8001f76:	bd70      	pop	{r4, r5, r6, pc}
 8001f78:	466a      	mov	r2, sp
 8001f7a:	ab01      	add	r3, sp, #4
 8001f7c:	f7ff ffc8 	bl	8001f10 <__swhatbuf_r>
 8001f80:	9900      	ldr	r1, [sp, #0]
 8001f82:	4605      	mov	r5, r0
 8001f84:	4630      	mov	r0, r6
 8001f86:	f000 f891 	bl	80020ac <_malloc_r>
 8001f8a:	b948      	cbnz	r0, 8001fa0 <__smakebuf_r+0x44>
 8001f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f90:	059a      	lsls	r2, r3, #22
 8001f92:	d4ef      	bmi.n	8001f74 <__smakebuf_r+0x18>
 8001f94:	f023 0303 	bic.w	r3, r3, #3
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	81a3      	strh	r3, [r4, #12]
 8001f9e:	e7e3      	b.n	8001f68 <__smakebuf_r+0xc>
 8001fa0:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <__smakebuf_r+0x7c>)
 8001fa2:	62b3      	str	r3, [r6, #40]	; 0x28
 8001fa4:	89a3      	ldrh	r3, [r4, #12]
 8001fa6:	6020      	str	r0, [r4, #0]
 8001fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fac:	81a3      	strh	r3, [r4, #12]
 8001fae:	9b00      	ldr	r3, [sp, #0]
 8001fb0:	6120      	str	r0, [r4, #16]
 8001fb2:	6163      	str	r3, [r4, #20]
 8001fb4:	9b01      	ldr	r3, [sp, #4]
 8001fb6:	b15b      	cbz	r3, 8001fd0 <__smakebuf_r+0x74>
 8001fb8:	4630      	mov	r0, r6
 8001fba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fbe:	f000 f971 	bl	80022a4 <_isatty_r>
 8001fc2:	b128      	cbz	r0, 8001fd0 <__smakebuf_r+0x74>
 8001fc4:	89a3      	ldrh	r3, [r4, #12]
 8001fc6:	f023 0303 	bic.w	r3, r3, #3
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	81a3      	strh	r3, [r4, #12]
 8001fd0:	89a0      	ldrh	r0, [r4, #12]
 8001fd2:	4305      	orrs	r5, r0
 8001fd4:	81a5      	strh	r5, [r4, #12]
 8001fd6:	e7cd      	b.n	8001f74 <__smakebuf_r+0x18>
 8001fd8:	08001d69 	.word	0x08001d69

08001fdc <_free_r>:
 8001fdc:	b538      	push	{r3, r4, r5, lr}
 8001fde:	4605      	mov	r5, r0
 8001fe0:	2900      	cmp	r1, #0
 8001fe2:	d040      	beq.n	8002066 <_free_r+0x8a>
 8001fe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fe8:	1f0c      	subs	r4, r1, #4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bfb8      	it	lt
 8001fee:	18e4      	addlt	r4, r4, r3
 8001ff0:	f000 f97a 	bl	80022e8 <__malloc_lock>
 8001ff4:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <_free_r+0x8c>)
 8001ff6:	6813      	ldr	r3, [r2, #0]
 8001ff8:	b933      	cbnz	r3, 8002008 <_free_r+0x2c>
 8001ffa:	6063      	str	r3, [r4, #4]
 8001ffc:	6014      	str	r4, [r2, #0]
 8001ffe:	4628      	mov	r0, r5
 8002000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002004:	f000 b976 	b.w	80022f4 <__malloc_unlock>
 8002008:	42a3      	cmp	r3, r4
 800200a:	d908      	bls.n	800201e <_free_r+0x42>
 800200c:	6820      	ldr	r0, [r4, #0]
 800200e:	1821      	adds	r1, r4, r0
 8002010:	428b      	cmp	r3, r1
 8002012:	bf01      	itttt	eq
 8002014:	6819      	ldreq	r1, [r3, #0]
 8002016:	685b      	ldreq	r3, [r3, #4]
 8002018:	1809      	addeq	r1, r1, r0
 800201a:	6021      	streq	r1, [r4, #0]
 800201c:	e7ed      	b.n	8001ffa <_free_r+0x1e>
 800201e:	461a      	mov	r2, r3
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	b10b      	cbz	r3, 8002028 <_free_r+0x4c>
 8002024:	42a3      	cmp	r3, r4
 8002026:	d9fa      	bls.n	800201e <_free_r+0x42>
 8002028:	6811      	ldr	r1, [r2, #0]
 800202a:	1850      	adds	r0, r2, r1
 800202c:	42a0      	cmp	r0, r4
 800202e:	d10b      	bne.n	8002048 <_free_r+0x6c>
 8002030:	6820      	ldr	r0, [r4, #0]
 8002032:	4401      	add	r1, r0
 8002034:	1850      	adds	r0, r2, r1
 8002036:	4283      	cmp	r3, r0
 8002038:	6011      	str	r1, [r2, #0]
 800203a:	d1e0      	bne.n	8001ffe <_free_r+0x22>
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4401      	add	r1, r0
 8002042:	6011      	str	r1, [r2, #0]
 8002044:	6053      	str	r3, [r2, #4]
 8002046:	e7da      	b.n	8001ffe <_free_r+0x22>
 8002048:	d902      	bls.n	8002050 <_free_r+0x74>
 800204a:	230c      	movs	r3, #12
 800204c:	602b      	str	r3, [r5, #0]
 800204e:	e7d6      	b.n	8001ffe <_free_r+0x22>
 8002050:	6820      	ldr	r0, [r4, #0]
 8002052:	1821      	adds	r1, r4, r0
 8002054:	428b      	cmp	r3, r1
 8002056:	bf01      	itttt	eq
 8002058:	6819      	ldreq	r1, [r3, #0]
 800205a:	685b      	ldreq	r3, [r3, #4]
 800205c:	1809      	addeq	r1, r1, r0
 800205e:	6021      	streq	r1, [r4, #0]
 8002060:	6063      	str	r3, [r4, #4]
 8002062:	6054      	str	r4, [r2, #4]
 8002064:	e7cb      	b.n	8001ffe <_free_r+0x22>
 8002066:	bd38      	pop	{r3, r4, r5, pc}
 8002068:	200000dc 	.word	0x200000dc

0800206c <sbrk_aligned>:
 800206c:	b570      	push	{r4, r5, r6, lr}
 800206e:	4e0e      	ldr	r6, [pc, #56]	; (80020a8 <sbrk_aligned+0x3c>)
 8002070:	460c      	mov	r4, r1
 8002072:	6831      	ldr	r1, [r6, #0]
 8002074:	4605      	mov	r5, r0
 8002076:	b911      	cbnz	r1, 800207e <sbrk_aligned+0x12>
 8002078:	f000 f88c 	bl	8002194 <_sbrk_r>
 800207c:	6030      	str	r0, [r6, #0]
 800207e:	4621      	mov	r1, r4
 8002080:	4628      	mov	r0, r5
 8002082:	f000 f887 	bl	8002194 <_sbrk_r>
 8002086:	1c43      	adds	r3, r0, #1
 8002088:	d00a      	beq.n	80020a0 <sbrk_aligned+0x34>
 800208a:	1cc4      	adds	r4, r0, #3
 800208c:	f024 0403 	bic.w	r4, r4, #3
 8002090:	42a0      	cmp	r0, r4
 8002092:	d007      	beq.n	80020a4 <sbrk_aligned+0x38>
 8002094:	1a21      	subs	r1, r4, r0
 8002096:	4628      	mov	r0, r5
 8002098:	f000 f87c 	bl	8002194 <_sbrk_r>
 800209c:	3001      	adds	r0, #1
 800209e:	d101      	bne.n	80020a4 <sbrk_aligned+0x38>
 80020a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80020a4:	4620      	mov	r0, r4
 80020a6:	bd70      	pop	{r4, r5, r6, pc}
 80020a8:	200000e0 	.word	0x200000e0

080020ac <_malloc_r>:
 80020ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020b0:	1ccd      	adds	r5, r1, #3
 80020b2:	f025 0503 	bic.w	r5, r5, #3
 80020b6:	3508      	adds	r5, #8
 80020b8:	2d0c      	cmp	r5, #12
 80020ba:	bf38      	it	cc
 80020bc:	250c      	movcc	r5, #12
 80020be:	2d00      	cmp	r5, #0
 80020c0:	4607      	mov	r7, r0
 80020c2:	db01      	blt.n	80020c8 <_malloc_r+0x1c>
 80020c4:	42a9      	cmp	r1, r5
 80020c6:	d905      	bls.n	80020d4 <_malloc_r+0x28>
 80020c8:	230c      	movs	r3, #12
 80020ca:	2600      	movs	r6, #0
 80020cc:	603b      	str	r3, [r7, #0]
 80020ce:	4630      	mov	r0, r6
 80020d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020d4:	4e2e      	ldr	r6, [pc, #184]	; (8002190 <_malloc_r+0xe4>)
 80020d6:	f000 f907 	bl	80022e8 <__malloc_lock>
 80020da:	6833      	ldr	r3, [r6, #0]
 80020dc:	461c      	mov	r4, r3
 80020de:	bb34      	cbnz	r4, 800212e <_malloc_r+0x82>
 80020e0:	4629      	mov	r1, r5
 80020e2:	4638      	mov	r0, r7
 80020e4:	f7ff ffc2 	bl	800206c <sbrk_aligned>
 80020e8:	1c43      	adds	r3, r0, #1
 80020ea:	4604      	mov	r4, r0
 80020ec:	d14d      	bne.n	800218a <_malloc_r+0xde>
 80020ee:	6834      	ldr	r4, [r6, #0]
 80020f0:	4626      	mov	r6, r4
 80020f2:	2e00      	cmp	r6, #0
 80020f4:	d140      	bne.n	8002178 <_malloc_r+0xcc>
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	4631      	mov	r1, r6
 80020fa:	4638      	mov	r0, r7
 80020fc:	eb04 0803 	add.w	r8, r4, r3
 8002100:	f000 f848 	bl	8002194 <_sbrk_r>
 8002104:	4580      	cmp	r8, r0
 8002106:	d13a      	bne.n	800217e <_malloc_r+0xd2>
 8002108:	6821      	ldr	r1, [r4, #0]
 800210a:	3503      	adds	r5, #3
 800210c:	1a6d      	subs	r5, r5, r1
 800210e:	f025 0503 	bic.w	r5, r5, #3
 8002112:	3508      	adds	r5, #8
 8002114:	2d0c      	cmp	r5, #12
 8002116:	bf38      	it	cc
 8002118:	250c      	movcc	r5, #12
 800211a:	4638      	mov	r0, r7
 800211c:	4629      	mov	r1, r5
 800211e:	f7ff ffa5 	bl	800206c <sbrk_aligned>
 8002122:	3001      	adds	r0, #1
 8002124:	d02b      	beq.n	800217e <_malloc_r+0xd2>
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	442b      	add	r3, r5
 800212a:	6023      	str	r3, [r4, #0]
 800212c:	e00e      	b.n	800214c <_malloc_r+0xa0>
 800212e:	6822      	ldr	r2, [r4, #0]
 8002130:	1b52      	subs	r2, r2, r5
 8002132:	d41e      	bmi.n	8002172 <_malloc_r+0xc6>
 8002134:	2a0b      	cmp	r2, #11
 8002136:	d916      	bls.n	8002166 <_malloc_r+0xba>
 8002138:	1961      	adds	r1, r4, r5
 800213a:	42a3      	cmp	r3, r4
 800213c:	6025      	str	r5, [r4, #0]
 800213e:	bf18      	it	ne
 8002140:	6059      	strne	r1, [r3, #4]
 8002142:	6863      	ldr	r3, [r4, #4]
 8002144:	bf08      	it	eq
 8002146:	6031      	streq	r1, [r6, #0]
 8002148:	5162      	str	r2, [r4, r5]
 800214a:	604b      	str	r3, [r1, #4]
 800214c:	4638      	mov	r0, r7
 800214e:	f104 060b 	add.w	r6, r4, #11
 8002152:	f000 f8cf 	bl	80022f4 <__malloc_unlock>
 8002156:	f026 0607 	bic.w	r6, r6, #7
 800215a:	1d23      	adds	r3, r4, #4
 800215c:	1af2      	subs	r2, r6, r3
 800215e:	d0b6      	beq.n	80020ce <_malloc_r+0x22>
 8002160:	1b9b      	subs	r3, r3, r6
 8002162:	50a3      	str	r3, [r4, r2]
 8002164:	e7b3      	b.n	80020ce <_malloc_r+0x22>
 8002166:	6862      	ldr	r2, [r4, #4]
 8002168:	42a3      	cmp	r3, r4
 800216a:	bf0c      	ite	eq
 800216c:	6032      	streq	r2, [r6, #0]
 800216e:	605a      	strne	r2, [r3, #4]
 8002170:	e7ec      	b.n	800214c <_malloc_r+0xa0>
 8002172:	4623      	mov	r3, r4
 8002174:	6864      	ldr	r4, [r4, #4]
 8002176:	e7b2      	b.n	80020de <_malloc_r+0x32>
 8002178:	4634      	mov	r4, r6
 800217a:	6876      	ldr	r6, [r6, #4]
 800217c:	e7b9      	b.n	80020f2 <_malloc_r+0x46>
 800217e:	230c      	movs	r3, #12
 8002180:	4638      	mov	r0, r7
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	f000 f8b6 	bl	80022f4 <__malloc_unlock>
 8002188:	e7a1      	b.n	80020ce <_malloc_r+0x22>
 800218a:	6025      	str	r5, [r4, #0]
 800218c:	e7de      	b.n	800214c <_malloc_r+0xa0>
 800218e:	bf00      	nop
 8002190:	200000dc 	.word	0x200000dc

08002194 <_sbrk_r>:
 8002194:	b538      	push	{r3, r4, r5, lr}
 8002196:	2300      	movs	r3, #0
 8002198:	4d05      	ldr	r5, [pc, #20]	; (80021b0 <_sbrk_r+0x1c>)
 800219a:	4604      	mov	r4, r0
 800219c:	4608      	mov	r0, r1
 800219e:	602b      	str	r3, [r5, #0]
 80021a0:	f7fe fa02 	bl	80005a8 <_sbrk>
 80021a4:	1c43      	adds	r3, r0, #1
 80021a6:	d102      	bne.n	80021ae <_sbrk_r+0x1a>
 80021a8:	682b      	ldr	r3, [r5, #0]
 80021aa:	b103      	cbz	r3, 80021ae <_sbrk_r+0x1a>
 80021ac:	6023      	str	r3, [r4, #0]
 80021ae:	bd38      	pop	{r3, r4, r5, pc}
 80021b0:	200000e4 	.word	0x200000e4

080021b4 <__sread>:
 80021b4:	b510      	push	{r4, lr}
 80021b6:	460c      	mov	r4, r1
 80021b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021bc:	f000 f8a0 	bl	8002300 <_read_r>
 80021c0:	2800      	cmp	r0, #0
 80021c2:	bfab      	itete	ge
 80021c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80021c6:	89a3      	ldrhlt	r3, [r4, #12]
 80021c8:	181b      	addge	r3, r3, r0
 80021ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80021ce:	bfac      	ite	ge
 80021d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80021d2:	81a3      	strhlt	r3, [r4, #12]
 80021d4:	bd10      	pop	{r4, pc}

080021d6 <__swrite>:
 80021d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021da:	461f      	mov	r7, r3
 80021dc:	898b      	ldrh	r3, [r1, #12]
 80021de:	4605      	mov	r5, r0
 80021e0:	05db      	lsls	r3, r3, #23
 80021e2:	460c      	mov	r4, r1
 80021e4:	4616      	mov	r6, r2
 80021e6:	d505      	bpl.n	80021f4 <__swrite+0x1e>
 80021e8:	2302      	movs	r3, #2
 80021ea:	2200      	movs	r2, #0
 80021ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021f0:	f000 f868 	bl	80022c4 <_lseek_r>
 80021f4:	89a3      	ldrh	r3, [r4, #12]
 80021f6:	4632      	mov	r2, r6
 80021f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021fc:	81a3      	strh	r3, [r4, #12]
 80021fe:	4628      	mov	r0, r5
 8002200:	463b      	mov	r3, r7
 8002202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800220a:	f000 b817 	b.w	800223c <_write_r>

0800220e <__sseek>:
 800220e:	b510      	push	{r4, lr}
 8002210:	460c      	mov	r4, r1
 8002212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002216:	f000 f855 	bl	80022c4 <_lseek_r>
 800221a:	1c43      	adds	r3, r0, #1
 800221c:	89a3      	ldrh	r3, [r4, #12]
 800221e:	bf15      	itete	ne
 8002220:	6560      	strne	r0, [r4, #84]	; 0x54
 8002222:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002226:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800222a:	81a3      	strheq	r3, [r4, #12]
 800222c:	bf18      	it	ne
 800222e:	81a3      	strhne	r3, [r4, #12]
 8002230:	bd10      	pop	{r4, pc}

08002232 <__sclose>:
 8002232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002236:	f000 b813 	b.w	8002260 <_close_r>
	...

0800223c <_write_r>:
 800223c:	b538      	push	{r3, r4, r5, lr}
 800223e:	4604      	mov	r4, r0
 8002240:	4608      	mov	r0, r1
 8002242:	4611      	mov	r1, r2
 8002244:	2200      	movs	r2, #0
 8002246:	4d05      	ldr	r5, [pc, #20]	; (800225c <_write_r+0x20>)
 8002248:	602a      	str	r2, [r5, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	f7fe f960 	bl	8000510 <_write>
 8002250:	1c43      	adds	r3, r0, #1
 8002252:	d102      	bne.n	800225a <_write_r+0x1e>
 8002254:	682b      	ldr	r3, [r5, #0]
 8002256:	b103      	cbz	r3, 800225a <_write_r+0x1e>
 8002258:	6023      	str	r3, [r4, #0]
 800225a:	bd38      	pop	{r3, r4, r5, pc}
 800225c:	200000e4 	.word	0x200000e4

08002260 <_close_r>:
 8002260:	b538      	push	{r3, r4, r5, lr}
 8002262:	2300      	movs	r3, #0
 8002264:	4d05      	ldr	r5, [pc, #20]	; (800227c <_close_r+0x1c>)
 8002266:	4604      	mov	r4, r0
 8002268:	4608      	mov	r0, r1
 800226a:	602b      	str	r3, [r5, #0]
 800226c:	f7fe f96c 	bl	8000548 <_close>
 8002270:	1c43      	adds	r3, r0, #1
 8002272:	d102      	bne.n	800227a <_close_r+0x1a>
 8002274:	682b      	ldr	r3, [r5, #0]
 8002276:	b103      	cbz	r3, 800227a <_close_r+0x1a>
 8002278:	6023      	str	r3, [r4, #0]
 800227a:	bd38      	pop	{r3, r4, r5, pc}
 800227c:	200000e4 	.word	0x200000e4

08002280 <_fstat_r>:
 8002280:	b538      	push	{r3, r4, r5, lr}
 8002282:	2300      	movs	r3, #0
 8002284:	4d06      	ldr	r5, [pc, #24]	; (80022a0 <_fstat_r+0x20>)
 8002286:	4604      	mov	r4, r0
 8002288:	4608      	mov	r0, r1
 800228a:	4611      	mov	r1, r2
 800228c:	602b      	str	r3, [r5, #0]
 800228e:	f7fe f966 	bl	800055e <_fstat>
 8002292:	1c43      	adds	r3, r0, #1
 8002294:	d102      	bne.n	800229c <_fstat_r+0x1c>
 8002296:	682b      	ldr	r3, [r5, #0]
 8002298:	b103      	cbz	r3, 800229c <_fstat_r+0x1c>
 800229a:	6023      	str	r3, [r4, #0]
 800229c:	bd38      	pop	{r3, r4, r5, pc}
 800229e:	bf00      	nop
 80022a0:	200000e4 	.word	0x200000e4

080022a4 <_isatty_r>:
 80022a4:	b538      	push	{r3, r4, r5, lr}
 80022a6:	2300      	movs	r3, #0
 80022a8:	4d05      	ldr	r5, [pc, #20]	; (80022c0 <_isatty_r+0x1c>)
 80022aa:	4604      	mov	r4, r0
 80022ac:	4608      	mov	r0, r1
 80022ae:	602b      	str	r3, [r5, #0]
 80022b0:	f7fe f964 	bl	800057c <_isatty>
 80022b4:	1c43      	adds	r3, r0, #1
 80022b6:	d102      	bne.n	80022be <_isatty_r+0x1a>
 80022b8:	682b      	ldr	r3, [r5, #0]
 80022ba:	b103      	cbz	r3, 80022be <_isatty_r+0x1a>
 80022bc:	6023      	str	r3, [r4, #0]
 80022be:	bd38      	pop	{r3, r4, r5, pc}
 80022c0:	200000e4 	.word	0x200000e4

080022c4 <_lseek_r>:
 80022c4:	b538      	push	{r3, r4, r5, lr}
 80022c6:	4604      	mov	r4, r0
 80022c8:	4608      	mov	r0, r1
 80022ca:	4611      	mov	r1, r2
 80022cc:	2200      	movs	r2, #0
 80022ce:	4d05      	ldr	r5, [pc, #20]	; (80022e4 <_lseek_r+0x20>)
 80022d0:	602a      	str	r2, [r5, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	f7fe f95c 	bl	8000590 <_lseek>
 80022d8:	1c43      	adds	r3, r0, #1
 80022da:	d102      	bne.n	80022e2 <_lseek_r+0x1e>
 80022dc:	682b      	ldr	r3, [r5, #0]
 80022de:	b103      	cbz	r3, 80022e2 <_lseek_r+0x1e>
 80022e0:	6023      	str	r3, [r4, #0]
 80022e2:	bd38      	pop	{r3, r4, r5, pc}
 80022e4:	200000e4 	.word	0x200000e4

080022e8 <__malloc_lock>:
 80022e8:	4801      	ldr	r0, [pc, #4]	; (80022f0 <__malloc_lock+0x8>)
 80022ea:	f7ff be0f 	b.w	8001f0c <__retarget_lock_acquire_recursive>
 80022ee:	bf00      	nop
 80022f0:	200000d8 	.word	0x200000d8

080022f4 <__malloc_unlock>:
 80022f4:	4801      	ldr	r0, [pc, #4]	; (80022fc <__malloc_unlock+0x8>)
 80022f6:	f7ff be0a 	b.w	8001f0e <__retarget_lock_release_recursive>
 80022fa:	bf00      	nop
 80022fc:	200000d8 	.word	0x200000d8

08002300 <_read_r>:
 8002300:	b538      	push	{r3, r4, r5, lr}
 8002302:	4604      	mov	r4, r0
 8002304:	4608      	mov	r0, r1
 8002306:	4611      	mov	r1, r2
 8002308:	2200      	movs	r2, #0
 800230a:	4d05      	ldr	r5, [pc, #20]	; (8002320 <_read_r+0x20>)
 800230c:	602a      	str	r2, [r5, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	f7fe f8e1 	bl	80004d6 <_read>
 8002314:	1c43      	adds	r3, r0, #1
 8002316:	d102      	bne.n	800231e <_read_r+0x1e>
 8002318:	682b      	ldr	r3, [r5, #0]
 800231a:	b103      	cbz	r3, 800231e <_read_r+0x1e>
 800231c:	6023      	str	r3, [r4, #0]
 800231e:	bd38      	pop	{r3, r4, r5, pc}
 8002320:	200000e4 	.word	0x200000e4

08002324 <_init>:
 8002324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002326:	bf00      	nop
 8002328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800232a:	bc08      	pop	{r3}
 800232c:	469e      	mov	lr, r3
 800232e:	4770      	bx	lr

08002330 <_fini>:
 8002330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002332:	bf00      	nop
 8002334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002336:	bc08      	pop	{r3}
 8002338:	469e      	mov	lr, r3
 800233a:	4770      	bx	lr
